#+LATEX_CLASS: koma-article
#+TITLE: SLIME & Cider -- Lisp Development using Emacs
#+LANGUAGE: en
#+OPTIONS: H:3 num:nil toc:t \n:nil @:t ::t |:t ^:nil -:t f:nil *:t TeX:t skip:nil d:nil tags:not-in-toc

* Getting started

Emacs is a versatile text editor that can be used for a variety of tasks, including writing code and running an interactive REPL, short for Read-Eval-Print-Loop or =(loop (print (eval (read))))=. Emacs can be downloaded from the [[https://www.gnu.org/software/emacs/][GNU website]] but most likely you will want to use a specific distribution for your operating system or rely on your preferred package manager. If you are on Mac OS X, Emacs is available via Homebrew in different flavours: a cask application (=brew cask install emacs=), the stable or devel version from GNU (=brew install emacs --HEAD=) or a vanilla version with [[https://github.com/d12frosted/homebrew-emacs-plus][much better default settings]] (=brew tap d12frosted/emacs-plus && brew install emacs-plus=). It is also possible to setup some [[https://www.emacswiki.org/emacs/StarterKits][starter kits]] that come bundled with lot of handy packages and custom keybindings, or you can install full featured environments like [[http://spacemacs.org][Spacemacs]] or [[https://github.com/hlissner/doom-emacs][Doom]]. The latter make heavy use of [[https://github.com/emacs-evil/evil][evil]], [[https://github.com/justbur/emacs-which-key][which-key]] and [[https://github.com/emacs-helm/helm][Helm]] or [[https://github.com/abo-abo/swiper][Ivy]] modes. If you are new to Emacs or you like modal editing, this is probably the way to go.

Of course, beside Emacs you will likely want to install a Lisp compiler, like [[http://sbcl.org][Steel Bank Common Lisp]] (SBCL) or [[https://ccl.clozure.com][Clozure Common Lisp]] (CCL).

* Common Lisp and SLIME

** Setting up SLIME

[[https://common-lisp.net/project/slime/][SLIME]] is the /de facto/ engine to process and interact with Common Lisp files. Without SLIME, you would have to write your Lisp code in a text editor and load it (or copy-paste part of it) into your Lisp interpreter. This works but you will lack several components, like the debugger or the help system. Also, you will need to keep all that stuff synchronized: suppose you altered a definition but forgot to evaluate it, the results printed in your interpreted will not reflect that changes.

Spacemacs and Doom Emacs provide SLIME integration when you add a Lisp-specific "layer" in your =init.el= file. For instance, with Spacemacs, all you have to do is to add "common-lisp" to the existing =dotspacemacs-configuration-layers= list in your =~/.spacemacs=. If you use Doom, the factory settings should be enough. Otherwise, you can download SLIME from the official website or a GitHub repository and add it to your =load-path= using a few commands. Assuming you install SLIME in your home directory, the following ELisp commands can be used:
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/slime")
(require 'slime)
(slime-setup)
#+END_SRC

Note that it is also possible to install SLIME with [[https://www.quicklisp.org/beta/][quicklisp]] that you may want to install anyway if you plan to install additional packages for your Lisp environment, e.g., SBCL. In this case, you will end up adding the following commands to your =init.el= file:
#+BEGIN_SRC emacs-lisp
(load (expand-file-name "~/.quicklisp/slime-helper.el"))
(setq inferior-lisp-program "sbcl")
#+END_SRC

** Using SLIME

Starting SLIME is quite simple: All you have to do is ~M-x slime~. You can now start writing some Lisp instructions in a new file, or an already existing one. This file should have the =.lisp= extension. You can compile any function or definition by issuing ~C-c C-c~ anywhere in between parenthesis, e.g., just after =(defun= or before the last closing parenthesis.


A shorter implementation could possibly read =(loop for i from 1 upto 4e5 by 4 sum (/ 8d0 i (+ i 2)))=. as suggested on [[https://stackoverflow.com/a/412228][Stack Overflow]].


These are now available at the =REPL= prompt in =SLIME= 
#+BEGIN_EXAMPLE
CL-USER> 
#+END_EXAMPLE

* Clojure and Cider

** Setting up Cider

[[https://github.com/clojure-emacs/cider][Cider]] has been developed to mimic SLIME for CL. The base ingredients are the Cider package itself and an [[https://github.com/clojure/tools.nrepl][nREPL]] server which can be managed via [[https://github.com/technomancy/leiningen][Leiningen]].

** Using Cider

For instance, consider the following function which can be used to approximate $\pi$ using [[https://en.wikipedia.org/wiki/Leibniz_formula_for_Ï€][Leibniz formula]]. Care must be taken with this formula as it converges slowly but it is possible to rely on alternating series or to use the fact that 
$$ \tan^{-1}\frac{1}{\sqrt{3}} = \frac{\pi}{6} = \frac{1}{\sqrt{3}} \left( 1 - \frac{1}{3\cdot 3^1} + 
   \frac{1}{5\cdot 3^2} - \frac{1}{7\cdot 3^3} + \dots \right). $$
Lazy sequences    
