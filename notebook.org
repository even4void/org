#+TITLE: scratchpad

* R Notebook

#+BEGIN_SRC R :results output org
library(ascii)
options(asciiType = "org")
ascii(summary(ToothGrowth))
#+END_SRC

#+RESULTS:
#+begin_src org
|   | len           | supp  | dose          |
|---+---------------+-------+---------------|
| 1 | Min.   : 4.20 | OJ:30 | Min.   :0.500 |
| 2 | 1st Qu.:13.07 | VC:30 | 1st Qu.:0.500 |
| 3 | Median :19.25 |       | Median :1.000 |
| 4 | Mean   :18.81 |       | Mean   :1.167 |
| 5 | 3rd Qu.:25.27 |       | 3rd Qu.:2.000 |
| 6 | Max.   :33.90 |       | Max.   :2.000 |
#+end_src

#+BEGIN_SRC R :results output
Hmisc::describe(ToothGrowth)
#+END_SRC

#+RESULTS:
#+begin_example
ToothGrowth

 3  Variables      60  Observations
--------------------------------------------------------------------------------
len
       n  missing distinct     Info     Mean      Gmd      .05      .10
      60        0       43    0.999    18.81    8.839     6.37     8.11
     .25      .50      .75      .90      .95
   13.07    19.25    25.27    27.30    29.57

lowest :  4.2  5.2  5.8  6.4  7.0, highest: 29.4 29.5 30.9 32.5 33.9
--------------------------------------------------------------------------------
supp
       n  missing distinct
      60        0        2

Value       OJ  VC
Frequency   30  30
Proportion 0.5 0.5
--------------------------------------------------------------------------------
dose
       n  missing distinct     Info     Mean      Gmd
      60        0        3    0.889    1.167    0.678

Value        0.5   1.0   2.0
Frequency     20    20    20
Proportion 0.333 0.333 0.333
--------------------------------------------------------------------------------
#+end_example

#+BEGIN_SRC R :results output
library(dplyr)
options(width = 100)
ToothGrowth %>%
  group_by(supp) %>%
  skimr::skim()
#+END_SRC

#+RESULTS:
#+begin_example
── Data Summary ────────────────────────
                           Values
Name                       Piped data
Number of rows             60
Number of columns          3
_______________________
Column type frequency:
  numeric                  2
________________________
Group variables            supp

── Variable type: numeric ──────────────────────────────────────────────────────────────────────────
  skim_variable supp  n_missing complete_rate  mean    sd    p0   p25   p50   p75  p100 hist
1 len           OJ            0             1 20.7  6.61    8.2  15.5  22.7  25.7  30.9 ▅▃▅▇▆
2 len           VC            0             1 17.0  8.27    4.2  11.2  16.5  23.1  33.9 ▇▇▇▇▃
3 dose          OJ            0             1  1.17 0.634   0.5   0.5   1     2     2   ▇▇▁▁▇
4 dose          VC            0             1  1.17 0.634   0.5   0.5   1     2     2   ▇▇▁▁▇
#+end_example

#+BEGIN_SRC R :results output html
library(tidyverse)
library(gt)
ToothGrowth %>%
  filter(supp == "OJ") %>%
  mutate(dose = factor(dose, ordered = TRUE)) %>%
  group_by(dose) %>%
  summarize(mean = mean(len)) %>%
  gt()
#+END_SRC

#+RESULTS:
#+begin_export html
<style>html {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;
}

#pxzxpwgpnp .gt_table {
  display: table;
  border-collapse: collapse;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#pxzxpwgpnp .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#pxzxpwgpnp .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#pxzxpwgpnp .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 0;
  padding-bottom: 4px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#pxzxpwgpnp .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#pxzxpwgpnp .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#pxzxpwgpnp .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#pxzxpwgpnp .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#pxzxpwgpnp .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#pxzxpwgpnp .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#pxzxpwgpnp .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#pxzxpwgpnp .gt_group_heading {
  padding: 8px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
}

#pxzxpwgpnp .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#pxzxpwgpnp .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#pxzxpwgpnp .gt_from_md > :first-child {
  margin-top: 0;
}

#pxzxpwgpnp .gt_from_md > :last-child {
  margin-bottom: 0;
}

#pxzxpwgpnp .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#pxzxpwgpnp .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 12px;
}

#pxzxpwgpnp .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#pxzxpwgpnp .gt_first_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
}

#pxzxpwgpnp .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#pxzxpwgpnp .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#pxzxpwgpnp .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#pxzxpwgpnp .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#pxzxpwgpnp .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding: 4px;
}

#pxzxpwgpnp .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#pxzxpwgpnp .gt_sourcenote {
  font-size: 90%;
  padding: 4px;
}

#pxzxpwgpnp .gt_left {
  text-align: left;
}

#pxzxpwgpnp .gt_center {
  text-align: center;
}

#pxzxpwgpnp .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#pxzxpwgpnp .gt_font_normal {
  font-weight: normal;
}

#pxzxpwgpnp .gt_font_bold {
  font-weight: bold;
}

#pxzxpwgpnp .gt_font_italic {
  font-style: italic;
}

#pxzxpwgpnp .gt_super {
  font-size: 65%;
}

#pxzxpwgpnp .gt_footnote_marks {
  font-style: italic;
  font-size: 65%;
}
</style>
<div id="pxzxpwgpnp" style="overflow-x:auto;overflow-y:auto;width:auto;height:auto;"><table class="gt_table">

  <thead class="gt_col_headings">
    <tr>
      <th class="gt_col_heading gt_columns_bottom_border gt_center" rowspan="1" colspan="1">dose</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1">mean</th>
    </tr>
  </thead>
  <tbody class="gt_table_body">
    <tr>
      <td class="gt_row gt_center">0.5</td>
      <td class="gt_row gt_right">13.23</td>
    </tr>
    <tr>
      <td class="gt_row gt_center">1</td>
      <td class="gt_row gt_right">22.70</td>
    </tr>
    <tr>
      <td class="gt_row gt_center">2</td>
      <td class="gt_row gt_right">26.06</td>
    </tr>
  </tbody>


</table></div>
#+end_export

* Lisp Notebook

#+BEGIN_SRC emacs-lisp
(+ 1 3)
#+END_SRC


* Python Notebook

#+BEGIN_SRC python :results output
key = "Babel"
print("Hello %s" % (key))
#+END_SRC

From [[https://programmingpraxis.com/2018/04/13/third-biggest-number/][Programming Praxis]].

Originally, the task is to "Write a program to read ten numbers input by the user and write the third largest of those ten numbers." I choose to replace user input with random integers.

This amounts to draw a reandom sequence of 10 values, sort them in descending order and select the 3rd value. We can safely ignore any ties in the list. With Python 3.6, it would be interesting to try the [[https://docs.python.org/3.6/library/secrets.html#module-secrets][secrets]] module.

#+BEGIN_SRC python :results output
from random import seed, randint
seed(101)
x = sorted([randint(1, 10) for i in range(0, 9)], reverse=True)
print("Answer = value %s in sequence %s" % (x[2], x))
#+END_SRC

#+RESULTS:
: Answer = value 7 in sequence [10, 10, 7, 6, 5, 3, 3, 3, 2]

Now, in Clojure:

#+BEGIN_SRC clojure
(def x (sort > (take 10 (repeatedly #(rand-int 10)))))
(let [[a b c] x]
    (println x)
    (println c))
#+END_SRC

#+RESULTS:
: (9 9 9 9 8 6 6 2 0 0)
: 9

This does not allow to fix the seed while keeping the laziness (see [[https://kotka.de/blog/2009/11/Taming_the_Bound_Seq.html][Taming the Bound Seq]]). Here is an [[https://stackoverflow.com/a/22460517][alternative solution]] from Stack Overflow:

#+BEGIN_SRC clojure
(ns example.show
  (:require [clojure.data.generators :as g]))

(defn rand-seq [seed]
  (let [r (java.util.Random. seed)]
    (repeatedly #(binding [g/*rnd* r]
                   (inc (g/uniform 0 10))))))

(take 10 (rand-seq 42))
#+END_SRC

It is weird that we cannot set the seed of PRNGs unless we use ~data.generators~. In CL, we have ~random-state~.
See [[https://dcatteeu.github.io/article/2014/07/31/random-numbers/][Random Numbers in Common Lisp]].
