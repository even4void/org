* Inbox
** Check this new series of posts from Stata blog
[2018-02-15 Thu 21:01]
https://blog.stata.com/2018/02/15/programming-an-estimation-command-in-stata-preparing-to-write-a-plugin/
** See if we can make something similar to handle statistical projects and tutorials.
[2018-02-15 Thu 18:01]
http://dankleiman.com/2018/01/28/keeping-an-engineering-notebook/
** Useful stuff for "agile data science" and "design pattern for efficient data mining"
[2018-02-18 Sun 09:43]
https://www.oreilly.com/ideas/questioning-the-lambda-architecture
** Is this working?
[2018-02-19 Mon 00:13]
https://github.com/qdot/org-gitbook
** Cool stuff here. Check out other posts on CL implementation
[2018-02-19 Mon 23:18]
https://kaygun.tumblr.com/post/161636640449/a-stochastic-gradient-descent-implementation-in
** Lot of useful stuff to master iterators in Python 3
Reminds me of: Clojure High Performance -- Variations around the Fibonacci sequence using linear algorithms: https://deque.blog/2017/06/01/clojure-high-performance-fibonacci/#more-22281
[2018-02-20 Tue 12:35]
https://www.youtube.com/watch?v=ThS4juptJjQ
** Useful reading list to start diving into Haskell land
[2018-02-20 Tue 19:58]
http://www.stephendiehl.com/posts/haskell_2018.html
** Useful guide to setup Haskell for productive work
[2018-02-21 Wed 13:02]
https://lexi-lambda.github.io/blog/2018/02/10/an-opinionated-guide-to-haskell-in-2018/
** Nice overview of resampling methods.
[2018-02-22 Thu 10:24]
https://stats.stackexchange.com/questions/104040/resampling-simulation-methods-monte-carlo-bootstrapping-jackknifing-cross
** Here is an HN thread where we learn a lot about how Mathematica was originally designed. See also this blog post: [[http://blog.stephenwolfram.com/2013/02/what-should-we-call-the-language-of-mathematica/][What Should We Call the Language of Mathematica?]]
[2018-02-24 Sat 21:35]
https://news.ycombinator.com/item?id=9797936
** Check the code on  GitHub to see if I can use it for custom handouts
[2018-03-02 Fri 19:08]
https://jblevins.org/log/dot-grid-paper
** To get inspiration for an org-based textbook. See also https://lakshminp.com/publishing-book-using-org-mode
[2018-03-05 Mon 09:39]
https://procomun.wordpress.com/2014/03/10/writing-a-book-with-emacs/
** Check the extended documentation and files in texlive
[2018-03-05 Mon 16:22]
http://petr.olsak.net/opmac-e.html
** To learn more about zip, gzip and zlib, by Marc Adler. h/t https://piotrkazmierczak.com/2016/how-are-zlib-gzip-and-zip-related/
[2018-03-05 Mon 23:54]
https://stackoverflow.com/questions/20762094/how-are-zlib-gzip-and-zip-related-what-do-they-have-in-common-and-how-are-they
** Yet another blog post about Org and GTD, specifically https://www.buildingasecondbrain.com
[2018-03-06 Tue 09:58]
https://praxis.fortelabs.co/building-a-second-brain-in-emacs-and-org-mode-faa20ae06fc
** A nice sociological account of Steve Job's life and vision of things
[2018-03-06 Tue 10:02]
https://kieranhealy.org/blog/archives/2011/10/10/a-sociology-of-steve-jobs/
** Introduction to org-ref features
[2018-03-06 Tue 10:21]
https://www.youtube.com/watch?v=2t925KRBbFc
** Why Sage is failing. Check also https://www.reddit.com/r/math/comments/45q7j1/sagemath_open_source_is_now_ready_to_compete_with/
[2018-03-06 Tue 12:39]
http://sagemath.blogspot.fr/2014/08/what-is-sagemathcloud-lets-clear-some.html
** Someone must have to write an EOS
[2018-03-06 Tue 12:57]
https://writequit.org/eos/eos.html
** Yet another org-powered blog
[2018-03-06 Tue 13:09]
https://ogbe.net/blog/blogging_with_org.html
** Useful stuff to build a custom Iosevka font type for emacs and web
[2018-03-06 Tue 13:20]
http://whyarethingsthewaytheyare.com/trying-out-iosevka-font/
** Very nice looking web site with lot of goodies inside
[2018-03-06 Tue 14:04]
https://www.baty.net/post/
** Read some blog entries
[2018-03-09 Fri 21:43]
https://pavpanchekha.com/
** Org-mode in VS Code
[2018-03-14 Wed 10:57]
https://news.ycombinator.com/item?id=16198369
** I should definitely check the scrartcl class
[2018-03-14 Wed 22:20]
https://tex.stackexchange.com/questions/295864/tufte-alike-design-with-sidenotes-crossing-pagebreaks-or-tufte-made-with-komas/352756#352756
** How does it compare to [[https://spark.apache.org/docs/latest/sql-programming-guide.html#datasets-and-dataframes][Apache Spark DataFrame]]?
[2018-03-15 Thu 21:45]
https://github.com/acowley/Frames
** Interesting Youtube channel to learn cool things about dataviz
[2018-03-16 Fri 08:32]
https://www.youtube.com/channel/UCbfYPyITQ-7l4upoX8nvctg
** Useful handouts for caluclus and probability
[2018-03-16 Fri 08:45]
http://sites.math.rutgers.edu/~zeilberg/
** To find datasets
[2018-03-16 Fri 13:43]
http://www.statsci.org/datasets.html
** Short info on how to use irony and rdm for clang stuff
[2018-04-21 Sam 23:35]
https://oremacs.com/2017/03/28/emacs-cpp-ide/
** Useful code snippet to generate reproducible random numbers in Clojure
[2018-04-23 Lun 10:29]
https://stackoverflow.com/questions/24007063/how-to-generate-repeatable-random-sequences-with-rand-int
** Implement this PRNG in Clojure
[2018-04-23 Lun 18:28]
https://www.codeproject.com/Articles/25172/Simple-Random-Number-Generation
** Constructive critic of Stephen Wolfram wrt his book "A New Kind of Science"
[2018-04-24 Mar 00:22]
https://nedbatchelder.com/blog/200207/stephen_wolframs_unfortunate_ego.html
** Implementation of Random Forest in Lisp (See also the interface to Gnuplot)
[2018-04-25 Mer 08:24]
https://github.com/masatoi/cl-random-forest
** Nice ressources on Epidemiology, including Clayton's book on Statistical Models in Epidemiology
[2018-04-26 Jeu 12:50]
http://www.med.mcgill.ca/epidemiology/hanley/bios601/
** How to disable Google chrome updater
[2018-04-30 Lun 17:28]
http://applehelpwriter.com/2014/07/13/how-to-remove-googles-secret-update-software-from-your-mac/
** Good intro to Python itertools
[2018-05-01 Mar 12:49]
https://www.blog.pythonlibrary.org/2016/04/20/python-201-an-intro-to-itertools/
** Cool Python 3.x tips & tricks
[2018-05-02 Mer 14:50]
https://sahandsaba.com/thirty-python-language-features-and-tricks-you-may-not-know.html
** Think of prioritization of endpoints as pre-specification of the order for publication and how the study results are publicized. It is OK to announce a “significant” third endpoint as long as the “insignificant” first and second endpoints are announced first, and the context for the third endpoint is preserved.
[2018-05-07 Lun 10:30]
http://www.fharrell.com/post/ymult/
** Check some of the courses and PDFs
[2018-05-08 Mar 08:51]
https://people.eecs.berkeley.edu/~wkahan/
** Useful Emacs init files (blog post here: http://www.howardism.org/Technical/Emacs/orgmode-wordprocessor.html)
[2018-05-08 Mar 08:57]
https://github.com/howardabrams/dot-files
** Interesting Swift/CBLAS link + Numpy-like methods
[2018-05-12 Sam 08:30]
https://stsievert.com/swix/
** Ressources for Stata teaching
[2018-05-12 Sam 08:30]
https://www.stata.com/links/resources-for-learning-stata/#cheat
** Quick introduction to git internals for people who are not scared by words like Directed Acyclic Graph.
[2018-05-12 Sam 08:46]
http://eagain.net/articles/git-for-computer-scientists/
** Interesting blog posts and econom(etr)ics courses using Python and Stata
[2018-05-12 Sam 09:53]
http://rlhick.people.wm.edu/posts/index.html
** See the notes section for interesting maths and number theory with algorithms
[2018-05-12 Sam 21:01]
https://crypto.stanford.edu/pbc/
** Number Theory with Python
[2018-05-13 Dim 18:49]
http://www.math.umbc.edu/~campbell/Computers/Python/numbthy.html
** Tutorial on Python Pandas by the same author of the [[http://ehneilsen.net/notebook/orgExamples/org-examples.html][org-mode tutorial]]
[2018-05-14 Lun 08:16]
http://ehneilsen.net/notebook/pandasExamples/pandas_examples.html
** Useful cheat sheet for org-mode, especially +OPTIONS keywords
[2018-05-14 Lun 08:22]
https://emacsclub.github.io/html/org_tutorial.html
** Lot of ressources on crypto/math and number theory
[2018-05-15 Mar 09:53]
http://www.math.brown.edu/~jhs/
** Looks like a nice intro to Swift
[2018-05-15 Mar 09:54]
https://www.hackingwithswift.com/read/0/overview
** Interesting tutorials on Stata by Mark Lunt
[2018-05-15 Mar 09:55]
http://personalpages.manchester.ac.uk/staff/mark.lunt/stats_course.html
** To learn a bit of Vim (again)
[2018-05-15 Mar 10:34]
https://ferd.ca/vim-and-composability.html
** Interesting R package that brings some Stata output
[2018-05-15 Mar 21:07]
https://github.com/matthieugomez/statar
** How to use org-mode with Stata code
[2018-05-15 Mar 21:18]
http://rlhick.people.wm.edu/posts/stata-and-literate-programming-in-emacs-org-mode.html
** How to custiomize HTML and CSS with org-mode
[2018-05-15 Mar 21:18]
https://emacs.stackexchange.com/questions/7629/the-syntax-highlight-and-indentation-of-source-code-block-in-exported-html-file
** Yet Another Org-Mode Configuration
[2018-05-16 Mer 10:41]
http://www.i3s.unice.fr/~malapert/org/tips/emacs_orgmode.html
** What to put in your Stata profile.do
[2018-05-16 Mer 19:47]
https://www.statalist.org/forums/forum/general-stata-discussion/general/1405778-profile-do-useful-startups
** Yet another org-mode post dedicated to Hugo
[2018-05-16 Mer 21:59]
https://www.zcl.space/tools/my-blog-workflow/
** The setup
[2018-05-18 Ven 06:32]
https://writequit.org/org/
** Plain TeX template for editing refcard
[2018-05-18 Ven 09:29]
https://michaelgoerz.net/refcards/
** Common Lisp Quick Reference is a free booklet with short descriptions of the thousand or so symbols defined in the ANSI standard
[2018-05-18 Ven 09:31]
http://clqr.boundp.org/
** Interesting package! See also {breakDown} [[https://pbiecek.github.io/breakDown/]].
[2018-05-18 Ven 14:04]
http://pbiecek.github.io/archivist/
** Check dataMaid (An R package for data screening)
[2018-05-18 Ven 14:18]
https://github.com/ekstroem/dataMaid
** Config options for org-mode with French babel
[2018-05-20 Dim 09:16]
http://drieu.org/post/R%C3%A9glages-org-mode-et-export-PDF
** Org-babel examples on GitHUb
[2018-05-20 Dim 09:46]
https://github.com/dfeich/org-babel-examples
** Free online Lisp books
[2018-05-20 Dim 23:55]
https://www.onlineprogrammingbooks.com/lisp/
** A local+cloud alternative to Dropbox
[2018-05-20 Dim 23:59]
https://syncthing.net/
** Interesting gnuplot examples
[2018-05-22 Mar 07:10]
http://www.gnuplotting.org/
** Another org config
[2018-05-23 Mer 09:44]
http://members.optusnet.com.au/~charles57/GTD/gtd_workflow.html
** Useful tips on org-mode + beautiful CSS
[2018-05-23 Mer 16:45]
http://www.cachestocaches.com/2016/9/my-workflow-org-agenda/
** Other than proselint, there is this plugin to help in detecting writing typos and the like
[2018-05-24 Jeu 15:20]
https://github.com/bnbeckwith/writegood-mode
** Interesting read
[2018-05-28 Lun 22:34]
https://arachnoid.com/trouble_with_psychology/index.html
** How to Start a Bookdown Book
[2018-05-29 Mar 07:27]
http://seankross.com/2016/11/17/How-to-Start-a-Bookdown-Book.html
** Python for NLP and machine learning
[2018-05-30 Mer 08:23]
https://github.com/TiesdeKok/Python_NLP_Tutorial
** Another tutorial on Python for accounting resarch
[2018-05-30 Mer 08:24]
https://github.com/TiesdeKok/LearnPythonforResearch
** Good old tutorial on Org + Pandoc
[2018-05-30 Mer 08:35]
https://www.rousette.org.uk/archives/org-mode-and-pandoc/
** Jupyter vs. R Markdown
[2018-05-30 Mer 18:12]
https://www.datacamp.com/community/blog/jupyter-notebook-r
** I should try to replace ipynb with Md files
[2018-05-30 Mer 18:15]
https://github.com/rossant/ipymd
** And now here is a way to convert Python notebook to RMarkdown
[2018-05-30 Mer 18:17]
https://github.com/chronitis/ipyrmd
** Interesting template for Gitbook with open review
[2018-05-30 Mer 19:08]
https://benmarwick.github.io/bookdown-ort/mods.html
** Base16 for Shells
[2018-05-30 Mer 21:35]
https://github.com/chriskempson/base16-shell
** Interesting approach with Vagrant and rstats
[2018-05-31 Jeu 09:18]
https://github.com/agoldst/litdata-vagrant
** CL and Machine Learning
[2018-05-31 Jeu 09:19]
https://github.com/mmaul/clml
** Really nice tutorial
[2018-05-31 Jeu 09:20]
https://github.com/seeingtheory/Seeing-Theory
** Useful mu4e config tips
[2018-06-01 Ven 04:01]
https://github.com/thblt/.emacs.d/blob/master/dotemacs.org
** Drowning in Email; mu4e to the Rescue
[2018-06-01 Ven 04:04]
http://www.macs.hw.ac.uk/~rs46/posts/2014-01-13-mu4e-email-client.html
** Email done right (in Emacs)
[2018-06-01 Ven 04:14]
https://zmalltalker.com/linux/mu.html
** Pretty nice idea
[2018-06-01 Ven 21:54]
https://erikclarke.net/2014/10/21/keeping-a-lab-notebook-with-org-mode-git-papers-and-pandoc-part-ii/
** In case we want to go to the dark side with Forklift
[2018-06-04 Lun 09:30]
https://johnscullen.com/how-to-make-forklift-3-the-default-file-viewer/
** Interesting application for teaching with Rosner's FEV dataset
[2018-06-04 Lun 11:01]
https://ww2.amstat.org/publications/jse/v13n2/datasets.kahn.html
** Good paper that summarizes the main point of logistic regression
[2018-06-04 Lun 19:35]
http://www.kan.or.kr/kor/shop_sun/files/memoir_img/201302/mm__201304301807550.pdf
** Useful tutorial on mixed-effect models using R
[2018-06-05 Mar 07:25]
http://rpsychologist.com/r-guide-longitudinal-lme-lmer
** R code for Cleveland dot plot using ggplot2
[2018-06-05 Mar 18:48]
https://uc-r.github.io/cleveland-dot-plots
** Course on the analysis of discrete data using R
[2018-06-06 Mer 10:28]
https://onlinecourses.science.psu.edu/stat504/
** So nice illustration of ML principles
[2018-06-06 Mer 10:37]
http://www.r2d3.us/visual-intro-to-machine-learning-part-1/
** How to configure Emacs flycheck for ES6
[2018-06-07 Jeu 11:22]
http://codewinds.com/blog/2015-04-02-emacs-flycheck-eslint-jsx.html
** Interesting online book
[2018-06-08 Ven 13:41]
https://www.bookofproofs.org/branches/
** Interesting book or not?
[2018-06-08 Ven 19:24]
http://www.statsref.com/StatsRefSample.pdf
** Nice setup for Pytjon. It should work with Rust too. Looking forward to cquery!
 [2018-06-12 Mar 16:39]
 https://vxlabs.com/2018/06/08/python-language-server-with-emacs-and-lsp-mode/
** Read this for Stata GLMs
 [2018-06-13 Mer 22:00]
 https://stats.idre.ucla.edu/stata/webbooks/logistic/chapter3/lesson-3-logistic-regression-diagnostics/
** Better than Spark? What's the difference? See the xgboost project.
 [2018-06-18 Lun 19:48]
 http://flink.apache.org/
** See how it is going wrt. existing implementation. Also related: https://github.com/danking/racket-ml.
 [2018-06-21 Jeu 09:46]
 https://github.com/mkierzenka/Racket_NumericalMethods
** Good starter kit for git collaboration. See also (more recent): https://blog.scottlowe.org/2015/01/27/using-fork-branch-git-workflow/
 [2018-06-22 Ven 11:08]
 https://code.tutsplus.com/tutorials/how-to-collaborate-on-github--net-34267
** Stata histogram with survey weights
 [2018-06-22 Ven 16:45]
 https://stackoverflow.com/questions/32121901/stata-density-distribution-functions-with-survey-data
** NHANES dataset for Stata
 [2018-06-22 Ven 23:30]
 https://www.icpsr.umich.edu/icpsrweb/NACDA/series/39
** Anlysis of NHANES dataset in Stata
 [2018-06-22 Ven 23:32]
 https://stats.idre.ucla.edu/stata/seminars/applied-svy-stata13/
** Nice summary of some Stata commands for test and modeling
 [2018-06-26 Mar 10:14]
 http://nepaldevelopment.pbworks.com/w/page/61335021/STATA%3A%20Quick%20Command%20Reference
** Security and ML in Python @ssi.gouv.fr
 [2018-06-27 Mer 18:44]
 https://github.com/ANSSI-FR/SecuML
** Is it better than cquery?
 [2018-07-04 Mer 21:06]
 https://github.com/MaskRay/ccls
** Useful tips for scientific computing using floats in Racket
 [2018-07-05 Jeu 10:38]
 https://stackoverflow.com/questions/16009143/scientific-notation-conversion-scheme
** Interesting tutorials on numerical methods.
 [2018-07-05 Jeu 13:01]
 https://math.la.asu.edu/~dajones/
** Now that it reaches version 1.0 I should try BeakerX gain
 [2018-07-06 Ven 12:32]
 http://beakerx.com/
** Useful add-ons for Stata twoway
 [2018-07-07 Sam 10:08]
 https://stats.idre.ucla.edu/stata/faq/graph/njc-stata-plots/
** Is this why I get so blurry font rendering with my HP external monitor?
 [2018-07-07 Sam 11:30]
 https://apple.stackexchange.com/questions/299820/font-smoothing-in-high-sierra/300025
** Operating Systems: From 0 to 1
 [2018-07-10 Mar 08:37]
 https://tuhdo.github.io/os01/
** Interesting minimalistic theme and concept (albeit for VS Code)
 [2018-07-13 Ven 20:22]
 https://github.com/tonsky/vscode-theme-alabaster
** Clojure DSL for Apacke Spark
 [2018-07-16 Lun 08:08]
 https://github.com/yieldbot/flambo
** Interesting links on stat libs for Clojure
 [2018-07-16 Lun 08:12]
 https://www.reddit.com/r/Clojure/comments/6kjdrk/is_there_an_actively_developed_stats_library_for/
** Reread this when I will be more proficient using core Clojure
 [2018-07-16 Lun 15:28]
 https://github.com/nathanmarz/specter
** Useful ressource on mathematical statistics
 [2018-07-17 Mar 18:39]
 http://math.usu.edu/symanzik/
** Petit traité de Lisp en français
 [2018-07-19 Jeu 09:33]
 http://dept-info.labri.fr/~strandh/Teaching/Programmation-Symbolique/Common/Book/Dir.html
** Clojure and AWS Lambda
 [2018-07-21 Sam 07:02]
 https://aws.amazon.com/fr/blogs/compute/clojure/
** Getting Started on Heroku with Clojure
 [2018-07-21 Sam 07:02]
 https://devcenter.heroku.com/articles/getting-started-with-clojure
** Interesting approach for managing Git projects
 [2018-07-29 Dim 17:18]
 https://github.com/git-up/GitUp
** I should try this at some point
 [2018-07-29 Dim 18:06]
 https://github.com/deadc0de6/dotdrop
** Base 16 shell color
 [2018-07-29 Dim 18:12]
 https://github.com/chriskempson/base16-shell
** Teach yourself programming in ten years
 [2018-07-30 Lun 21:19]
 http://norvig.com/21-days.html
** Successor of window-purpose
 [2018-10-03 Wed 18:24]
 https://github.com/syl20bnr/spacemacs/tree/develop/layers/%2Bspacemacs/spacemacs-purpose
** Interesting tool to manage Github repo from the command line
 [2018-10-03 Wed 18:27]
 http://myusuf3.github.io/octogit/
** Meow Hash algorithm; see also https://github.com/bodil/meowhash-rs
 [2018-10-22 Mon 19:29]
 https://mollyrocket.com/meowhash
** Interesting config for org and Hugo
 [2018-10-27 Sat 17:43]
 https://www.shanesveller.com/blog/2018/02/13/blogging-with-org-mode-and-ox-hugo/
** Blot on your local machine
 [2018-11-20 Tue 20:49]
 https://github.com/davidmerfield/Blot
** Interesting cheatsheet for Org babel
 [2018-11-20 Tue 20:59]
 https://necromuralist.github.io/posts/org-babel-cheat-sheet/
** Interesting list of algorithms implemented in different languages
 [2018-11-23 Fri 17:55]
 https://github.com/Thuva4/Algorithms
** Interesting tutorials on Racket
 [2019-01-15 Tue 19:31]
 https://courses.cs.washington.edu/courses/cse341/12au/index.html
** Useful tricks to configure iCloud and Gmail using isync
 [2019-01-25 Fri 10:30]
 https://ict4g.net/adolfo/notes/2014/12/27/EmacsIMAP.html
** Another nice tutorial on setting up mu4e
 [2019-01-25 Fri 11:52]
 http://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and-/
** Nice custom functions for mu4e and org-mode
 [2019-01-29 Tue 08:59]
 https://gitlab.com/ambrevar/dotfiles/blob/master/.emacs.d/lisp/init-mu4e.el
** Biomedical Data Science (R and Bioconductor)
 [2019-02-05 Tue 08:43]
 http://genomicsclass.github.io/book/
** Three algorithms with Python code for Gradient descent. See also http://ruder.io/optimizing-gradient-descent/ and https://jermwatt.github.io/mlrefined/.
 [2019-02-10 Sun 11:35]
 https://www.hackerearth.com/blog/machine-learning/3-types-gradient-descent-algorithms-small-large-data-sets/
** Ninety-Nine Lisp Problems
 [2019-02-10 Sun 14:06]
 https://www.ic.unicamp.br/~meidanis/courses/mc336/2006s2/funcional/L-99_Ninety-Nine_Lisp_Problems.html
** Difference between setq and setf in Common Lisp
 [2019-02-11 Mon 10:57]
 https://stackoverflow.com/questions/869529/difference-between-set-setq-and-setf-in-common-lisp
** Interesting library for math computing
 [2019-02-11 Mon 13:53]
 https://github.com/mfiano/gamebox-math
** Google Calendar With Org-Mode
 [2019-02-12 Tue 20:42]
 http://jameswilliams.be/blog/2016/01/11/Taming-Your-GCal.html
** Lisp and bioinformatics
 [2019-02-13 Wed 13:45]
 https://omicsomics.blogspot.com/2017/09/why-is-lisp-so-rare-in-bioinformatics.html
** Performance and types in Lisp
 [2019-02-13 Wed 19:12]
 https://blog.30dor.com/2014/03/21/performance-and-types-in-lisp/
** Org babel reference card
 [2019-02-13 Wed 19:32]
 https://org-babel.readthedocs.io/en/latest/
** Phylogenetic Network Software
 [2019-02-15 Fri 09:36]
 http://www.fluxus-engineering.com/sharenet.htm
** How to read MD5 hash efficiently in Python 2/3. See also https://stackoverflow.com/a/20014805
 [2019-02-16 Sat 11:02]
 https://stackoverflow.com/questions/1131220/get-md5-hash-of-big-files-in-python/40961519#40961519
** Introduction to ML with Common Lisp
 [2019-02-16 Sat 12:57]
 https://gorkovchanin.wordpress.com/2017/07/21/introduction-to-ml-with-common-lisp/
** BioJulia packages. See also https://julialang.org/blog/2015/10/biojulia-sequence-analysis
 [2019-02-16 Sat 14:07]
 https://biojulia.net/
** What's the most efficient file format for the storage of DNA sequences?
 [2019-02-16 Sat 14:09]
 https://bioinformatics.stackexchange.com/questions/1/whats-the-most-efficient-file-format-for-the-storage-of-dna-sequences
** Check these new estimators and the [[https://github.com/neurospin/pylearn-parsimony][parsimony]] package
 [2019-02-16 Sat 20:47]
 http://neurospin.github.io/pylearn-parsimony/tutorials.html
** Emacs for Travis CI
 [2019-02-17 Sun 09:06]
 https://github.com/flycheck/emacs-travis
** IPython kernel for Racket
 [2019-02-17 Sun 09:15]
 https://github.com/ppaml-op3/iracket
** Set Forklift as the default file manager. See also [[https://johnscullen.com/how-to-make-forklift-3-the-default-file-viewer/][How to make ForkLift 3 the default file viewer]]
 [2019-02-18 Mon 12:11]
 https://apple.stackexchange.com/questions/45809/set-forklift-as-default-file-viewer/45831#45831
** Resources for Population Genetics in R
 [2019-02-19 Tue 10:53]
 https://github.com/emmanuelparadis/popgenInfo
** Phylogenetic trees in Python
 [2019-02-19 Tue 12:20]
 https://github.com/Zsailer/phylogenetics/blob/master/docs/index.rst
** Trees in SQL. See also https://www.postgresql.org/docs/9.0/ltree.html
 [2019-02-19 Tue 12:21]
 https://communities.bmc.com/docs/DOC-9902
** Software for bayesian phylogeny
 [2019-02-20 Wed 07:42]
 http://nbisweden.github.io/MrBayes/download.html
** Galaxy Pasteur
 [2019-02-20 Wed 07:43]
 https://galaxy.pasteur.fr/?form=dnapars
** Tips on using org-journal
 [2019-02-20 Wed 09:11]
 https://bastibe.de/2018-04-02-scheduling-future-todos-in-org-journal.html
** Classification of genome data with n-gram models using Mathematica
 [2019-02-20 Wed 10:51]
 https://mathematicaforprediction.wordpress.com/tag/markov-chains/
** Markov Chains and evolution
 [2019-02-20 Wed 10:56]
 https://math.la.asu.edu/~jtaylor/teaching/Spring2015/APM504/APM504.html
** A Biologist's Guide to Mathematical Modeling with Mathematica applications
 [2019-02-20 Wed 11:14]
 http://www.zoology.ubc.ca/biomath/
** Programming with strings in Mathematica
 [2019-02-20 Wed 12:43]
 https://www.mathematica-journal.com/2013/04/strings/
** Writing fast Mathematica code
 [2019-02-21 Thu 10:28]
 https://blog.wolfram.com/2011/12/07/10-tips-for-writing-fast-mathematica-code/
** Sample matehmatica notebooks for biology
 [2019-02-21 Thu 10:30]
 http://theory.bio.uu.nl/sb/wiskunde/Mathematica/
** Phylogenetic trees in Mathematica
 [2019-02-21 Thu 11:40]
 https://mathematica.stackexchange.com/questions/126496/how-to-work-with-phylogenetic-trees
** Various courses on stochastic processes
 [2019-02-21 Thu 12:51]
 https://math.la.asu.edu/~jtaylor/courses.html
** Functional programming in Mathematica
 [2019-02-23 Sat 08:52]
 https://reference.wolfram.com/language/guide/FunctionalProgramming.html
** How to handle simple and complex rules in Timing App
 [2019-02-23 Sat 10:33]
 https://timingapp.com/help/rules
** Processing and visualization tools for quantitative MRI data using Mathematica
 [2019-02-24 Sun 09:33]
 https://github.com/mfroeling/QMRITools
** Nice posts by Pearly Spencer on Stata
 [2019-02-25 Mon 09:08]
 https://stackoverflow.com/search?q=user%3A8682794+%5Bstata%5D+program
** Internet guide to Stata
 [2019-02-25 Mon 09:37]
 http://wlm.userweb.mwn.de/Stata/
** Tutoriel Perl et DBI
 [2019-02-25 Mon 11:55]
 https://djibril.developpez.com/tutoriels/perl/perl-dbi/
** Tutorial on Flask and MySQL
 [2019-02-25 Mon 12:15]
 https://code.tutsplus.com/tutorials/creating-a-web-app-from-scratch-using-python-flask-and-mysql--cms-22972
** Algorithms for computational biology
 [2019-02-25 Mon 18:03]
 https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-096-algorithms-for-computational-biology-spring-2005/
** PHASE manual including discussion of phylogenetic theory
 [2019-02-25 Mon 18:35]
 http://bioinf.man.ac.uk/resources/phase/manual/node1.html
** Interesting blog
 [2019-02-25 Mon 18:54]
 http://johnhawks.net/
** Finding subsequences in strings
 [2019-02-25 Mon 20:50]
 https://www.geeksforgeeks.org/given-two-strings-find-first-string-subsequence-second/
** Is there an actively developed stats library for Clojure?
 [2019-02-26 Tue 07:57]
 https://www.reddit.com/r/Clojure/comments/6kjdrk/is_there_an_actively_developed_stats_library_for/
** Concatenates FASTA formatted files to one "phyml" (PHYLIP) formatted file
 [2019-02-26 Tue 09:47]
 https://github.com/nylander/catfasta2phyml
** Handling phylogenomic data
 [2019-02-26 Tue 09:53]
 http://odiogosilva.github.io/TriFusion/
** FASTA to sequential PHYLIP format converter
 [2019-02-26 Tue 09:57]
 http://aligner.azurewebsites.net/
** SSE3 support on macOS Macbook
 [2019-02-26 Tue 10:13]
 https://stackoverflow.com/questions/45917280/mac-osx-minumum-support-sse-version
** Elegant operations on matrix rows and columns
 [2019-02-26 Tue 13:01]
 https://mathematica.stackexchange.com/questions/3069/elegant-operations-on-matrix-rows-and-columns
** Useful tips for Mathjax
 [2019-02-26 Tue 20:05]
 https://yutsumura.com/mathjax-in-wordpress/
** Nice tutorial on deploying a Flask app on Heroku
 [2019-02-27 Wed 11:07]
 https://medium.com/the-andela-way/deploying-a-python-flask-app-to-heroku-41250bda27d0
** How to setup a Git mirror to have Travis CI working on Bitbucket
 [2019-02-27 Wed 16:48]
 https://pythonwise.blogspot.com/2012/05/using-travis-ci-with-bitbucket.html
** Travis tutorial
 [2019-02-27 Wed 18:10]
 https://docs.travis-ci.com/user/tutorial/
** How to setup Travis CI with GH pages and Hugo
 [2019-02-27 Wed 20:16]
 https://axdlog.com/2018/using-hugo-and-travis-ci-to-deploy-blog-to-github-pages-automatically/
** Netlify setup
 [2019-02-27 Wed 20:28]
 https://www.netlify.com/docs/cli/
** Heroku and Python/Flask
 [2019-02-28 Thu 09:53]
 https://coderwall.com/p/pstm1w/deploying-a-flask-app-at-heroku
** Codekit: Build websites faster and better
 [2019-02-28 Thu 09:55]
 https://codekitapp.com/index.html
** A template to get your Flask app running on Heroku as fast as possible
 [2019-02-28 Thu 09:56]
 https://github.com/zachwill/flask_heroku
** Making a Flask app using a PostgreSQL database and deploying to Heroku
 [2019-02-28 Thu 10:02]
 http://blog.sahildiwan.com/posts/flask-and-postgresql-app-deployed-on-heroku/
** Postgres guide
 [2019-02-28 Thu 17:38]
 http://postgresguide.com/
** Getting started with Docker on a Mac
 [2019-02-28 Thu 19:38]
 https://docs.docker.com/docker-for-mac/
** Another nice tutorial on Flask
 [2019-03-04 Mon 10:50]
 https://realpython.com/flask-by-example-part-2-postgres-sqlalchemy-and-alembic/
** Another tutorial on Flask + Postgresql
 [2019-03-04 Mon 10:55]
 https://blog.theodo.fr/2017/03/developping-a-flask-web-app-with-a-postresql-database-making-all-the-possible-errors/
** Flask 101
 [2019-03-04 Mon 10:58]
 https://www.blog.pythonlibrary.org/2017/12/12/flask-101-getting-started/
** Difference between pipvenv and virtualenv
 [2019-03-04 Mon 11:25]
 https://stackoverflow.com/questions/41573587/what-is-the-difference-between-venv-pyvenv-pyenv-virtualenv-virtualenvwrappe
** Python + Postgresql tutorials
 [2019-03-04 Mon 16:50]
 http://www.postgresqltutorial.com/postgresql-python/
** Python and alembic
 [2019-03-04 Mon 17:58]
 https://overiq.com/flask-101/database-migrations-with-alembic/
** IMDb data and SQL
 [2019-03-06 Wed 07:43]
 https://www.decisivedata.net/blog/import-data-from-multiple-csv-files-using-bulk-insert
** PostgreSQL and bash Stuff
 [2019-03-06 Wed 10:22]
 https://www.manniwood.com/postgresql_and_bash_stuff/index.html
** Drawing Graphs Directly in Psql
 [2019-03-06 Wed 16:08]
 http://akorotkov.github.io/blog/2016/06/09/psql-graph/
** Turn your PostgreSQL queries into Charts
 [2019-03-07 Thu 08:09]
 https://github.com/dimitri/pgcharts
** Haskell programming from manu.el
 [2019-03-07 Thu 09:44]
 https://github.com/manuel-uberti/haskell-programming
** Modern R with the tidyverse
 [2019-03-07 Thu 10:08]
 https://b-rodrigues.github.io/modern_R/
** How to Build a Machine Learning App from Scratch
 [2019-03-08 Fri 09:24]
 https://camtsmith.com/articles/2017-10/naive-bayes-text-classification
** Netlify vs Heroku
 [2019-03-08 Fri 12:07]
 https://linuxhint.com/netlify_vs_heroku/
** How to Type Common Symbols and Special Characters in Mac OS X
 [2019-03-08 Fri 12:19]
 https://www.chriswrites.com/how-to-type-common-symbols-and-special-characters-in-os-x/
** Yet another Flask tutorial with login and Heroku
 [2019-03-11 Mon 07:49]
 https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-v-user-logins
** Taxonomic trees in SQL
 [2019-03-12 Tue 07:35]
 http://gbif.blogspot.com/2012/06/taxonomic-trees-in-postgresql.html
** Managing local biological databases with the BioSQL module
 [2019-03-12 Tue 07:41]
 https://biopython.org/wiki/BioSQL
** BeautifulSoup: removing tags
 [2019-03-12 Tue 19:10]
 https://kaijento.github.io/2017/03/30/beautifulsoup-removing-tags/
** Skip List vs. Binary Search Tree
 [2019-03-15 Fri 10:10]
 https://stackoverflow.com/questions/256511/skip-list-vs-binary-search-tree
** Org export html options
 [2019-03-16 Sat 09:35]
 https://orgmode.org/manual/Export-settings.html
** Old good Emacs tutor
 [2019-03-18 Mon 11:06]
 https://www.tuteurs.ens.fr/unix/editeurs/emacs.html
** A DNA Sequence Alignment/Map (SAM) library for Common Lisp
 [2019-03-20 Wed 13:27]
 https://github.com/keithj/cl-sam
** Little Book of R for Bioinformatics
 [2019-03-20 Wed 13:33]
 https://a-little-book-of-r-for-bioinformatics.readthedocs.io/en/latest/
** Validated, scalable, community developed variant calling, RNA-seq and small RNA analysis
 [2019-03-20 Wed 13:52]
 https://github.com/bcbio/bcbio-nextgen
** A DNA Sequence Alignment/Map (SAM) library for Clojure
 [2019-03-20 Wed 13:53]
 https://chrovis.github.io/cljam/
** scikit-bio is an open-source, BSD-licensed, Python package providing data structures, algorithms, and educational resources for bioinformatics.
 [2019-03-20 Wed 14:04]
 https://github.com/biocore/scikit-bio
** Machine learning with clojure in 2018
 [2019-03-22 Fri 10:13]
 https://www.reddit.com/r/Clojure/comments/7w5ceh/machine_learning_with_clojure_in_2018/
** Binary search tree in Racket
 [2019-03-22 Fri 10:13]
 https://learningtogetolder.wordpress.com/2013/08/14/creating-a-binary-search-tree-in-racket/
** Cigar encoding
 [2019-03-22 Fri 10:15]
 https://genome.sph.umich.edu/wiki/SAM#What_is_a_CIGAR.3F
** Longest Common Subsequence using Scheme
 [2019-03-22 Fri 10:16]
 https://programmingpraxis.com/2009/06/09/longest-common-subsequence/
** Sequence Manipulation Suite
 [2019-03-22 Fri 10:17]
 https://www.bioinformatics.org/sms2/
** Check Lispy for Python inline evaluation
 [2019-03-22 Fri 11:08]
 https://github.com/abo-abo/lispy/
** ThinkStats in Clojure ([[https://metail.com/technology/think-stats-in-clojure-i/][www]])
 [2019-03-23 Sat 08:44]
 https://github.com/ray1729/thinkstats
** Awk tutorial
 [2019-03-23 Sat 08:45]
 http://www.grymoire.com/Unix/Awk.html
** Essential AWK Commands for Next Generation Sequence Analysis
 [2019-03-25 Mon 12:44]
 http://bioinformatics.cvr.ac.uk/blog/category/awk/
** sed and awk for genomics
 [2019-03-25 Mon 12:45]
 https://genomebio.org/sed-awk/
** Most Commonly used Awk by Bioinformatician
 [2019-03-25 Mon 12:45]
 http://bioinformaticsonline.com/pages/view/2573/most-commonly-used-awk-by-bioinformatician
** Bioinformatics one-liners
 [2019-03-25 Mon 12:46]
 https://github.com/stephenturner/oneliners
** Lecture notes on Complex Systems in Biology
 [2019-03-26 Tue 13:25]
 http://rocs.hu-berlin.de/complexsys2018/lectures/
** Hugo slim theme
 [2019-03-26 Tue 15:03]
 https://github.com/oblitum/hugo-theme-slim
** Zeit now examples
 [2019-03-26 Tue 18:43]
 https://github.com/zeit/now-examples
** How to migrate old networkx code
 [2019-03-26 Tue 18:43]
 https://networkx.github.io/documentation/stable/release/migration_guide_from_1.x_to_2.0.html
** Krigging
 [2019-03-27 Wed 09:36]
 https://desktop.arcgis.com/fr/arcmap/10.3/tools/3d-analyst-toolbox/how-kriging-works.htm
** Comparing different approaches to evolutionary simulations
 [2019-03-27 Wed 13:57]
 http://slideviewer.herokuapp.com/github/yoavram/ipython-notebooks/blob/master/simulation%20frameworks.ipynb#/
** Interesting courses
 [2019-03-27 Wed 14:20]
 http://www.peterbeerli.com/classes/index.php?title=Main_Page
** Modern Regression Analysis
 [2019-03-28 Thu 11:40]
 http://biostat.mc.vanderbilt.edu/wiki/Main/CourseBios312
** Bayesian Evolutionary Analysis by Sampling Trees
 [2019-03-29 Fri 10:42]
 https://github.com/CompEvol/beast2
** Emacs EShell Parameters
 [2019-03-29 Fri 20:02]
 https://github.com/howardabrams/dot-files/blob/master/emacs-eshell.org
** Remote pbcopy on OS X systems
 [2019-03-31 Sun 08:45]
 https://brettterpstra.com/2014/02/19/remote-pbcopy-on-os-x-systems/
** Remote access for macOS
 [2019-03-31 Sun 08:56]
 https://setapp.com/how-to/how-to-access-your-mac-remotely
** Tutorial on Python package
 [2019-04-01 Mon 08:44]
 https://python-packaging.readthedocs.io/en/latest/
** Virtualbox and postgresql
 [2019-04-01 Mon 15:32]
 http://grismar.net/2011/07/22/virtualbox_running_postgresql/
** Creating a minimal Ubuntu VirtualBox image
 [2019-04-01 Mon 15:38]
 https://matschaffer.com/2011/06/minimal-ubuntu-virtualbox/
** Installing Ubuntu on VirtualBox
 [2019-04-02 Tue 14:55]
 https://henricasanova.github.io/VirtualBoxUbuntuHowTo.html
** Interesting library to find or manage OSS projects
 [2019-04-03 Wed 09:32]
 https://libraries.io/
** Docker vs. Vagrant
 [2019-04-03 Wed 11:24]
 https://www.upguard.com/articles/docker-vs-vagrant
** Zappa -- Serverless Python
 [2019-04-03 Wed 12:54]
 https://github.com/Miserlou/Zappa
** Running Jupyter Lab as a Desktop Application
 [2019-04-03 Wed 21:07]
 http://christopherroach.com/articles/jupyterlab-desktop-app/
** Setting up a local web server on macOS 10.14 “Mojave”
 [2019-04-03 Wed 21:27]
 https://discussions.apple.com/docs/DOC-13841
** CD-HIT sequence identity
 [2019-04-04 Thu 14:39]
 https://www.drive5.com/usearch/manual9/cd_hit_id.html
** Generators and iterables in Python
 [2019-04-08 Mon 09:54]
 https://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do
** ShinyStudio
 [2019-04-08 Mon 13:05]
 https://github.com/dm3ll3n/ShinyStudio
** Fast multi-line FASTA/Q reader in several programming languages
 [2019-04-08 Mon 13:25]
 https://github.com/lh3/readfq
** Interesting R package for descriptive statistics
 [2019-04-09 Tue 13:59]
 https://cran.r-project.org/web/packages/summarytools/index.html
** Analysis of ESS data using R
 [2019-04-09 Tue 14:00]
 http://asdfree.com/european-social-survey-ess.html
** Emacs and Git
 [2019-04-10 Wed 09:45]
 http://alexott.net/en/writings/emacs-vcs/EmacsGit.html
** Netlify dev
 [2019-04-10 Wed 13:07]
 https://www.netlify.com/products/dev/
** Eve (after LightTable)
 [2019-04-10 Wed 13:07]
 http://witheve.com/
** Fuzzy String Comparison
 [2019-04-11 Thu 07:54]
 https://stackoverflow.com/questions/10383044/fuzzy-string-comparison
** Rose for genetic substitution model simulation
 [2019-04-11 Thu 07:54]
 https://popmodels.cancercontrol.cancer.gov/gsr/packages/rose/
** Computational Genomics and Molecular Biology
 [2019-04-15 Mon 11:51]
 https://www.cs.cmu.edu/~durand/03-711/2015/Lectures/
** Simply Scheme: Introducing Computer Science
 [2019-04-15 Mon 13:34]
 https://people.eecs.berkeley.edu/~bh/ss-toc2.html
** A short mathematica course
 [2019-04-15 Mon 13:52]
 http://j-star.org/mathematica_course.html
** Higher level tools for working with CSV data and files in Clojure
 [2019-04-15 Mon 13:54]
 https://github.com/metasoarous/semantic-csv
** SCons for data science and compbio
 [2019-04-15 Mon 14:38]
 https://www.metasoarous.com/scons-for-data-science-and-compbio/
** Gogs -- Un service git auto-hébergé sans-douleur
 [2019-04-16 Tue 10:50]
 https://gogs.io/
** A successful Git branching model
 [2019-04-16 Tue 11:30]
 https://nvie.com/posts/a-successful-git-branching-model/
** How to GitHub: Fork, Branch, Track, Squash and Pull Request
 [2019-04-16 Tue 11:30]
 https://www.gun.io/blog/how-to-github-fork-branch-and-pull-request
** Teaching material: Data analytics and visualization
 [2019-04-17 Wed 09:45]
 https://www.yan-holtz.com/teaching
** Documented Anomaly in Recent Versions of the BLASTN Algorithm and a Complete Reanalysis of Chimpanzee and Human Genome-Wide DNA Similarity Using Nucmer and LASTZ
 [2019-04-17 Wed 09:46]
 https://answersingenesis.org/genetics/dna-similarities/blastn-algorithm-anomaly/
** Interesting approach to learning Racket
 [2019-04-18 Thu 11:05]
 https://artyom.me/learning-racket-1
** Counsel, Ivy and Co.
[2019-05-08 Mer 08:31]
https://truthseekers.io/lessons/how-to-use-ivy-swiper-counsel-in-emacs-for-noobs/
** Markdown and Vim
[2019-05-11 Sam 19:17]
https://jdhao.github.io/2019/01/15/markdown_edit_preview_nvim/
** Brian Ripley's talks
[2019-05-17 Ven 10:35]
http://www.stats.ox.ac.uk/~ripley/talks.html
** Rich book classes in Latex
[2019-05-17 Ven 11:34]
https://tex.stackexchange.com/questions/134215/where-can-i-find-some-rich-book-classes
** Matthias Felleisen homepage
[2019-05-20 Lun 09:59]
https://felleisen.org/matthias/
** Random numbers in Scheme
[2019-05-20 Lun 11:25]
https://stackoverflow.com/questions/14674165/scheme-generate-random
** Programming Praxis Amazon Interview Question, part 2
[2019-05-20 Lun 11:52]
https://thornydev.blogspot.com/2012/12/programming-praxis-amazon-interview.html
** The Scheme Programming Language
[2019-05-20 Lun 19:26]
https://www.scheme.com/tspl4/
** Simulating Brownian motion in R
[2019-05-22 Mer 10:22]
http://phytools.org/eqg/Exercise_4.1/
** Simulated ecosystems
[2019-05-22 Mer 13:19]
https://jobtalle.com/simulated_ecosystems.html
** Interesting repos in Clojure. See also the blog.
[2019-05-24 Ven 13:50]
https://github.com/eigenhombre
** Lisp Notes and Handouts
[2019-05-27 Lun 10:18]
http://www.covingtoninnovations.com/mc/LispNotes/
** Static Generative Art Setup for Clojure
[2019-05-29 Mer 14:02]
http://marvelous-code.com/uncategorized/static-generative-art-setup-for-clojure/
** Immutability with normal JavaScript objects and arrays
[2019-05-31 Ven 13:22]
https://github.com/immerjs/immer
** Typescript and Emacs
[2019-05-31 Ven 18:41]
http://redgreenrepeat.com/2018/05/04/typescript-in-emacs/
** Various string metrics in Lisp
[2019-06-01 Sam 08:31]
https://github.com/cbaggers/mk-string-metrics
** Yet another Emacs configuration
[2019-06-01 Sam 20:23]
https://lthms.xyz/emacs.d
** Nice generative algorithm to draw hyphae
[2019-06-03 Lun 10:04]
https://inconvergent.net/generative/hyphae/
** Dual boot macOS/Ubuntu
[2019-06-04 Mar 11:46]
https://www.lifewire.com/dual-boot-linux-and-mac-os-4125733
** Useful Awk tips and tricks
[2019-06-06 Jeu 10:59]
http://www.grymoire.com/Unix/Awk.html
** Check blog posts and course materials
[2019-06-06 Jeu 10:59]
http://matt.might.net/#teaching
** Processing.js Quick Start
[2019-06-13 Jeu 10:21]
http://processingjs.org/articles/jsQuickStart.html
** A gentle introduction to persistent homology
[2019-06-13 Jeu 10:35]
https://christian.bock.ml/posts/persistent_homology/
** Historical map of Cognitive Science
[2019-06-13 Jeu 10:45]
http://www.riedlanna.com/cognitivesciencemap.html
** Differences between Processing.js and P5.js
[2019-06-13 Jeu 10:56]
https://www.sitepoint.com/processing-js-vs-p5-js-whats-difference/
** Growth Modeling of filamentous fungi
[2019-06-14 Ven 10:22]
http://2018.igem.org/Team:DTU-Denmark/GrowthModelling
** Solutions to Ninety-Nine Lisp Problems
[2019-06-17 Lun 10:34]
http://www.informatimago.com/develop/lisp/l99/
** C programming Solved Programs/Examples with Solutions
[2019-06-17 Lun 15:10]
https://www.includehelp.com/c-programming-examples-solved-c-programs.aspx
** Predator-Prey Modeling in Clojure
[2019-06-19 Mer 15:04]
https://markbastian.github.io/posts-output/2015-04-28-predator-prey/
** Exercises in Clojure with Commentary
[2019-06-19 Mer 15:13]
https://markbastian.github.io/posts-output/2015-05-27-exercises/
** Trees, Quil and Random
[2019-06-20 Jeu 10:36]
http://nbeloglazov.com/2015/05/18/trees-quil-and-random.html
** How to get 64 bit integer in common lisp?
[2019-06-21 Ven 10:10]
https://stackoverflow.com/questions/8674982/how-to-get-64-bit-integer-in-common-lisp
** (gnu) common lisp: features and functions
[2019-06-21 Ven 10:13]
http://www.csci.viu.ca/~wesselsd/courses/csci330/code/lisp/
** Nested for loops in R and Racket
[2019-07-04 Jeu 13:41]
https://www.travishinkelman.com/post/for-loop-r-racket/
** HT Sequence Analysis with R and Bioconductor
[2019-07-05 Ven 14:14]
http://manuals.bioinformatics.ucr.edu/home/ht-seq
** SSC Intro to NGS Bioinformatics Course
[2019-07-05 Ven 14:16]
https://wikis.utexas.edu/display/bioiteam/SSC+Intro+to+NGS+Bioinformatics+Course
** Algorithme de Needleman et Wunsch en Scheme
[2019-07-05 Ven 16:12]
http://www.laurentbloch.org/MySpip3/Algorithme-de-Needleman-et-Wunsch
** C ressources
[2019-07-20 Sat 20:37]
http://people.duke.edu/~tkb13/courses/ncsu-csc230/lecture/
** Racket course
[2019-07-20 Sat 20:59]
https://www.cs.grinnell.edu/~rebelsky/Courses/CSC151/2019S/readings/
** Light alternative to libgen.io
[2019-07-31 Mer 10:25]
https://the-eye.eu/public/Books/
** Sequences in Lisp
[2019-08-09 Fri 09:11]
https://www.slac.stanford.edu/comp/unix/gnu-info/cl_9.html
** Some tips & tricks on Fish and iTerm
[2019-08-16 Ven 08:38]
https://ghaiklor.github.io/iterm-fish-fisher-osx/
** Nord theme for Fish
[2019-08-16 Ven 08:39]
https://github.com/arcticicestudio/nord/issues/102
** TypeScript Language Specification
[2019-08-19 Lun 18:45]
https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md
** The Adventures of a Pythonista in Schemeland
[2019-08-19 Lun 18:45]
http://www.phyast.pitt.edu/~micheles/scheme/index.html
** Programming in Haskell - Solutions to slides
[2019-08-21 Wed 07:47]
https://tiefenauer.github.io/blog/programming-in-haskell/
** Using TypeScript with React
[2019-08-22 Thu 10:16]
https://simonknott.de/articles/Using-TypeScript-with-React.html
** Migrating from Python to Racket
[2019-08-22 Thu 16:06]
https://github.com/racket/racket/wiki/Python-to-Racket
** A philosophical difference between Haskell and Lisp
[2019-08-22 Thu 21:00]
https://chrisdone.com/posts/haskell-lisp-philosophy-difference/
** PH525x series - Biomedical Data Science
[2019-08-26 Mon 12:10]
http://genomicsclass.github.io/book/
** Awk one-liner
[2019-08-27 Tue 09:38]
http://tuxgraphics.org/~guido/scripts/awk-one-liner.html
** Emacs and GPG
[2019-08-27 Tue 16:03]
http://prodissues.com/2016/02/emacs-gpg-for-dummies.html
** A productive development environment with Docker on OS X
[2019-08-30 Fri 09:05]
https://www.ybrikman.com/writing/2015/05/19/docker-osx-dev/
** Docker vs. Virtualbox
[2019-08-30 Fri 09:07]
https://www.quora.com/What-is-the-difference-between-containerization-Docker-and-virtualization-VMWare-VirtualBox-Xen
* Notes
** [2005-08-10 Mer] RCS
Principe général de RCS
------------------------
RCS_ est un système de gestion de versions très simple d'utilisation,
qui permet de conserver une trâce de l'évolution d'un projet
(document, code source, etc.) en cours d'élaboration : cela comprend
la gestion automatisée des différentes versions du projet, les
modifications (ajout/suppression) apportées à celui-ci dans chaque
version, la gestion du travail collaboratif, et de nombreuses autres
fonctionnalités qui évitent des tâches d'intendance parfois
fastidieuses lorsqu'elles doivent être réalisée manuellement.

.. _RCS: http://www.gnu.org/software/rcs/rcs.html

RCS n'est qu'un système de contrôle de versions parmi d'autres. A
titre d'exemple, on peut citer CVS ou subversion, qui offrent
également des systèmes de gestion de version très efficace. L'avantage
de RCS est sa simplicité d'utilisation, et l'absence de configuration
de quelque nature que ce soit [#]_.


Gestion des versions
--------------------


Exemples
--------

Un simple document LaTeX
~~~~~~~~~~~~~~~~~~~~~~~~
On se propose d'illustrer les différentes commandes vues à propos de
RCS dans le cadre de l'édition d'un petit document en LaTeX. On édite
le fichier avec son éditeur préféré, on le compile pour vérifier qu'il
n'y a pas d'erreur, puis on le visionne avec xdvi. Généralement, on
répète cette procédure à chaque fois que l'on fait des modifications
sur le docuemnt, et à mesure que celui-ci grandit on est parfois amené
à conserver une partie du document telle quelle et à développer une
autre partie, puis à revenir sur l'ancienne partie, et cela nécessite
de conserver une trace visible des modifications (à moins d'avoir une
mémoire exceptionnelle). Plusieurs options permettent de gérer ce
genre d'aléas de l'édition de document : on peut passer en commentaire
une partie du texte tapé la veille, afin d'en conserver une trace,
renommer le fichier exemple.tex en exemple2.tex, etc. Mais en
utilisant RCS, on se passera de ces méthodes manuelles contraignantes,
et on bénéficiera d'un contrôle des différentes versions du document,
i.e. de son "évolution temporelle".
Tout d'abord, on insérera dans un commentaire en tête ou en fin du
document l'instruction ``$Header: /home/chl/Documents/work4site/rcs.tut/rcs.txt,v 1.1 2005/08/10 14:19:25 chl Exp chl $``, ce qui donne à peu près ceci dans
le source exemple.tex ::

  % $Header: /home/chl/Documents/work4site/rcs.tut/rcs.txt,v 1.1 2005/08/10 14:19:25 chl Exp chl $
  \documentclass[a4paper,12pt]{article} \usepackage[latin1]{inputenc}
  \usepackage[francais]{babel}

  \begin{document}
  ...

Ensuite, on dépose la première version du fichier dans l'archive RCS à
l'aide de la commande ::

  ci exemple.tex

Normalement, RCS affiche la suite de messages ci-dessous ::

  exemple.tex,v  <--  exemple.tex
  enter description, terminated with single '.' or end of file:
  NOTE: This is NOT the log message!
  >>

Il suffit alors de suivre les instructions indiquées et de donner une
plus ou moins brève description du projet à la suite de l'invite
``>>``, puis de valider et de saisir un point ``.`` pour retourner sous le
shell. RCS aura crée un fichier ``exemple.tex,v`` (vérifier avec la
commande ``ls``), qui contient les informations de version et le texte
du fichier original. Par défaut, la version attribué est la ``1.1``
puisque cela correspond à la *racine* du projet.

Afin de reprendre l'édition de notre document, il faut récupérer notre
fichier en tapant ::

  co exemple.tex

(attention, on ne tape pas le nom du fichier tel qu'il apparaît dans
le répertoire, i.e. exemple.tex,v)

On notera que cette fois, l'instruction ``$Header: /home/chl/Documents/work4site/rcs.tut/rcs.txt,v 1.1 2005/08/10 14:19:25 chl Exp chl $`` insérée en début
de document a été remplacée à présent par ``$Header:
/home/chl/Documents/work4site/rcs.tut/exemple.tex,v 1.1 2005/08/10
11:20:11 chl Exp $`` : elle indique le lieu où se trouve le fichier
dans l'arborescence de votre système, le numéro de version, la date de
dernière modification (i.e. en l'occurence d'archivage), l'auteur de
la dernière modification et le statut du document (ici Exp, pour
expérimental). Néanmois, si vous essayez d'effectuer des modifications
sur le document, votre éditeur vous renverra un message d'erreur lors
de l'enregistrement des modifications car le document est verouillé :
on peut le lire, le compiler, mais pas modifier son contenu. Pour
avoir un accès en écriture au fichier, il faut en fait taper la
commande ::

  co -l exemple.tex

Cette fois-ci, RCS indique ::

  exemple.tex,v  -->  exemple.tex
  revision 1.1 (locked)
  done

Le fichier est verrouillé car vous l'avez extrait pour
modifications. Toute personne qui tenterait de faire la même chose en
même temps que vous se verrait ainsi prié d'attendre que vous ayez
déverouillé l'archive. Bien évidemment, lorsque vous travaillez seul,
il n'est pas très utile d'avoir un tel système de contrôle de
l'édition par l'application d'un verrou à l'enreistrement : vous
pouvez dans ce cas taper ::

  ci -l exemple.tex

lors du dépôt, ce qui vous évitera de taper ``co -l`` à chaque fois
que vous souhaiterez rééditer le document. RCS se charge d'actualiser
le fichier ``exemple.tex,v`` sans détruire le fichier sur lequel vous
travaillez. La commande ``rcs -U`` permet également de libérer l'accès
au fichier, de sorte que l'on peut travailler dessus sans le
déverouiller au préalable.

Maintenant, on peut s'amuser à rajouter un paragraphe en fin de
document, et à effectuer de nouveau l'archivage du document pour
mettre à jour la version (après modifications, on devrait passer en
version 1.2). Après avoir enregistré les modifications, il suffit de
taper de nouveau ``ci exemple.tex``, et on doit voir s'afficher ::

  exemple.tex,v  <--  exemple.tex
  new revision: 1.2; previous revision: 1.1
  enter log message, terminated with single '.' or end of file:
  >>

On indique les modifications apportées à la suite de l'invite ``>>``,
on valide et on termine par un point ``.`` ; par exemple ::

  >> ajout de la section 3
  >> .
  done

Le fichier original ``exemple.tex`` a été de nouveau convertit en un
fichier ``exemple.tex,v`` par RCS, et il est à présent verrouillé dans
l'archive. Le numéro de version correspondant est bien ``1.2`` : c'est
la version numéro 2 du tronc, directement dérivée de la racine
(version 1.1). On vérifiera également en déverouillant l'archive pour
édition (``co -l exemple.tex``) que le numéro de version a bien été
mis à jour dans le source du document.

Pour visualiser l'ensemble des modifications qui ont été réalisées sur
le document depuis sa création, il suffit de taper ::

  rlog exemple.tex

Cette commande produit les informations relatives à l'ensemble des
modification qui ont été effectuées depuis le premier dépôt du fichier
dans l'archive ::

  RCS file: exemple.tex,v
  Working file: exemple.tex
  head: 1.2
  branch:
  locks: strict
  access list:
  symbolic names:
  keyword substitution: kv
  total revisions: 2;     selected revisions: 2
  description:
  un document simple sous LaTeX pour illustrer l'usage de RCS
  ----------------------------
  revision 1.2
  date: 2005/08/10 12:38:27;  author: chl;  state: Exp;  lines: +5 -1
  ajout de la section 3
  ----------------------------
  revision 1.1
  date: 2005/08/10 11:20:11;  author: chl;  state: Exp;
  Initial revision
  =============================================================================

.. [#] en dehors de l'installation de RCS... Si ce n'est pas le cas ;
.. sous Linux, c'est généralement installé d'office, si ce n'est pas
.. le cas, changer de système :-)

** [2006-07-09 Dim] C Tips

*Puissance de 2 :*

#+BEGIN_SRC c
int PowerOfTwo (unsigned i)
{
    /*
     * Returns TRUE if "i" is a power of 2 (has only one bit on).
     * Doesn't work for i == 0 (returns TRUE).
     */

    return ((i - 1) & i) == 0;
}
#+END_SRC

*Parité d'un entier :*

Knuth, =rng-double.c=, http://www-cs-faculty.stanford.edu/~knuth/

#+BEGIN_SRC c
#define is_odd(s) ((s)&1)
#+END_SRC

*Comptage de bit sets :*

#+BEGIN_SRC c
count = 0;
while (testnum) {
    testnum &= testnum - 1;
    count++;
}
#+END_SRC

*Signer un entier ou non :*

Bad:   =int i;   /* For positive numbers */=
Good:  =unsigned int i;=

For some operations, the compiler has to generate extra code to check for negative numbers, etc. You can avoid that if you know for sure that the number will never be negative.

*Boucle :*

/Bad/

#+BEGIN_SRC c
for (i = 0; i < 10; i++) {
    printf ("Hello ");  /* Body loop does not use "i" */
}
#+END_SRC

/Good/

#+BEGIN_SRC c
for (i = 10; i > 0; i--) {
    printf ("Hello ");  /* Body loop does not use "i" */
}
#+END_SRC

It is easier for the compiler to compare against zero than against 10 (or a more complex expression involving variables). Count backwards if you don't care about the loop variable. Use for =(i=9; i>=0; i--)= if you don't case about the direction of the loop variable (e.g., clearing an array), but make sure to use a signed integer.

*Macro :*

(1) /Bad/   =#define sqr(x)   (x*x)=
(2) /Bad/   =#define sqr(x)   (x)*(x)=
(3) /Good/  =#define sqr(x)   ((x)*(x))=

(1) Since the parameter is expanded textually, you'll get incorrect results if, say, =sqr(a+b)= is called.
(2) You want the pseudo-function =sqr()= to be atomic in case it is used next to another operator of equal or greater precedence. For example, the expressions =a/sqr(b= would be incorrect in the bad case.

*Ordre d'évaluation :*

/Bad/   =i = (getchar () << 8) | getchar ();=
/Good/  =i = getchar () << 8;=
      i |= getchar ();

You're not guaranteed anything about the order of evaluation, so the getchar's may actually be called in the wrong order. Split the calls up to be sure. The only operators that guarantee that the left side will be evaluated before the right are =&&=, =||=, and comma (=,=).

Comparaison de nombres réels :

/Bad/    =double x, y;  if (x==y) ...=
/Good/   =double x, y;  if (fabs (x - y) < EPS) ...=
/Better/ =double x, y;  if (-EPS < x - y && x - y < EPS) ...=

Don't compare floats or doubles to each other for equality because they are unlikely to be exactly the same. Use a small epsilon, such as 0.0001, for comparison. The value of =EPS= depends on the size of the reals and the application itself. The second good method avoids a function call but is messy and should be put in a macro.

Voir aussi http://www.faqs.org/faqs/C-faq/faq/, 14.5 ; Knuth Sec. 4.2.2 pp. 217-8.

*Utilisation du =goto= :*

#+BEGIN_SRC c
   for (i = 0; i < 128; i++ ) {
        for (j = 0; j < 128; j++) {
            if (a[i][j] == 5) {
                goto found;
            }
        }
    }
    printf ("Not found.\n");
    return;
found:
    printf ("Found at %d, %d\n", i, j);
#+END_SRC

*Pointeurs :*

/Bad/   =i = *(s + j);=
/Good/  =i = s[j];=

The code is equally fast and is more clear. Remember that "=a[b]=" is semantically equivalent to "=*((a) + (b))=".

*Variables et fonctions locales :*

/Bad/   =int done;=
/Bad/   =void copy() ...=
/Good/  =static int done;=
/Good/  =static void copy() ...=

If a global variable or function is only needed by one object file, then make it static to reduce the size of the symbol table and the possibilities of conflicts, and to give the compiler more information for optimizations.

** [2006-07-09 Dim] For scope in C

http://www.codecomments.com/archive376-2005-8-579427.html

Keith Wiley <kwiley@cs.unm.edu> wrote:
 > Xcode gives a lot of warnings and errors that I can't decipher. What's
 > this one mean:
 >
 > "matches this 'i' under ISO standard rules"
 >
 > Notice that it isn't even a properly formed sentence. The warning occurs
 > on a line like this:
 >
 > for (unsigned int i = 0; i < condRules->size(); i++)
 >
 > where condRules is a pointer to a vector. Other places in my code I do
 > things very similar to this without getting a warning.

 This probably occurs in a situation like this:

 int i;
 ....
 for(int i = 0; ... )
 { ... }

 func(i);

 You have declared two different i's here, and it's not clear which one of
 them is being referred to on the last line. In fact, it's so unclear that
 Microsoft's C++ compiler acted differently from all the other compilers
 for quite a long time, and bound you to the wrong one.

 Of course, it's hard to say for sure if this is your problem without
 seeing more of the surrounding code.

 It should also go without saying that this has nothing to do with
 Objective-C.

 --
 Michael Ash
 Rogue Amoeba Software

------------------------------------
In article <1125025156.153462@nfs-db1.segnet.com>,
 Michael Ash <mike@mikeash.com> wrote:

 > This probably occurs in a situation like this:
 >
 > int i;
 > ...
 > for(int i = 0; ... )
 > { ... }
 >
 > func(i);
 >
 > You have declared two different i's here, and it's not clear which one of
 > them is being referred to on the last line.

 Yes, it is clear:
 - In ANSI C, this is an error.
 - In ISO C++, this is correct code. The declaration of the int in the
 for loop goes out of scope at the end of the loop.

 > In fact, it's so unclear that Microsoft's C++ compiler acted differently from
 > all the other compilers for quite a long time, and bound you to the wrong
 > one.

 I am fairly sure that Microsoft's C++ compiler following the C standard
 in this. The workaround I frequently used was:

 {for( int i = 0; ...)
 {
 ...
 }}

 This keeps all compilers happy, and does not require the replacement of
 index variables after copy-pasting some code.

 > It should also go without saying that this has nothing to do with
 > Objective-C.

 I am not sure about that. Last time I checked, gcc on the Mac did both C
 and C++ for-loop scoping correctly. If that is correct,the original
 poster can not get this error in C or C++ code => It is likely that it
 is Objective-C or Objective-C++ code.

 It could well be a specific error message for Objective-C++ code because
 of this inconsistency between C and C++ for loop scoping. Objective-C++
 can not do for loop scoping correctly in both the C and the C++ sense.

 Reinder
-------------------------------

** [2006-07-09 Dim] Running R in batch mode
=/usr/bin/nice 19 R --no-save BATCH $1.R -o a.out &=
:encoding: ISO-8859-1
An introduction to knowledge engineering
========================================
Christophe Lalanne <christophe.lalanne@gmx.net>
Jan. 2008

// Applications using Neural Networks, Genetic Algorithms and Rule-Based Systems

image:ike.jpg[ike.jpg]
** [2006-10-15 Dim] Algorithmique
Introduction
============
Voici quelques notes concernant l'algorithmique au travers du langage
Pascal, initialement écrites au fil de mes lectures et de mon
apprentissage de ce langage. Elles sont rassemblées ici à titre
personnel, et éventuellement à titre pédagogique, pour les personnes
désireuses d'apprendre ce langage au travers d'exemples choisis, ou
pour les personnes connaissant déjà le langage mais recherchant
certains détails algorithmiques. Lorsque cela est possible (ou utile),
la même version en langage C est fournie, à titre de
comparaison. L'ensemble des sources figurant sur cette page ont été
testés avec gcc (Gnu C Compiler, version 3.4.1) et fpc (Free Pascal
Compiler, version 1.9.8), initialement sous GNU/Linux, puis sous MacOS X, avec gcc version 4.0.1 et fpc version 2.0.4-1.

Le calcul scientifique impose la plupart du temps de travailler avec
des réels, et soulève par conséquent le problème (i) de la
représentation de ces quantités en machine, et (ii) de la précision
des résultats issus des calculs effectués. J'ai rassemblé ici
quelques-unes des implications de ce type de calcul, au fur et à
mesure de mon "expérimentation" de ce domaine.

Il y a également quelques algorithmes plus généraux que l'on trouve
dans des cours de mathématiques pour l'informatique (ou vice-versa...)
très ordinaires, mais qui constituent toujours un bon point de départ
pour toute personne désireuse de débuter en programmation
mathématique. De nombreuses notions présentées sur cette page m'ont
été

On commencera par quelques rappels et considérations générales
concernant la programmation mathématique, puis on présentera
quelques-uns des algorithmes les plus connus, puis on terminera avec
des fonctions plus avancées.

Les exemples proposés sont réalisés en Pascal la plupart du temps,
quelques fois en C, et quelques implémentations en Scheme ou Maple
sont également disponibles. La littérature étant vaste sur ce sujet,
je donne ici à titre indicatif les ouvrages que j'ai consultés : [Bers1991]_, [Knut1997]_, [Boug1993]_. Les autres références ponctuelles (pages internet ou
ouvrages divers) sont indiquées directement dans le texte ou dans la
bibliographie rassemblée à la fin de ce document.

L'ensemble des sources figurant sur cette page ont été testés avec gcc
(Gnu C Compiler, version 3.4.1) et fpc (Free Pascal Compiler, version
2.0.0).

Calcul numérique
================

Calcul de sommes sans dépassement
---------------------------------
Lorsque l'on calcule une somme de manière classique, c'est-à-dire par
accumulation itérative des valeurs à sommer, il peut arriver qu'il se
produise un dépassemment du résultat du point de vue de la capacité de
représentation en machine, c'est-à-dire que la valeur de la somme
*temporaire* calculée à un certain moment n'est pas représentable en
machine, comme par exemple une somme codée en entier (integer)
dépassant 32765. C'est le cas lorsque l'on travaille avec de
grandes bases de données. Il est possible de remédier à cet
inconvénient en utilisant l'idée suivante :

.. TODO: compléter ce paragraphe

Voici le code correspondant ::

  function somme(A : tab): integer;
  var
     pos, neg: tab;
     npos, nneg, accu, i: integer;
  begin
     npos := 0;
     nneg := 0;
     {-- étape 1 : tri en termes positifs et négatifs --}
     for i:=1 to N do
        if A[i] >= 0 then
        begin
	   npos := npos + 1;
	   pos[npos] := A[i];
        end
        else
        begin
	   nneg := nneg + 1;
	   neg[nneg] := A[i];
        end;
     {-- étape 2 : calcul de la somme --}
     accu := 0;
     while (npos > 0) and (nneg > 0) do
     begin
        if accu >= 0 then
        begin
	   accu := accu + neg[nneg];
	   nneg := nneg - 1;
        end
        else
        begin
	   accu := accu + pos[npos];
	   npos := npos - 1;
        end
     end;
     {-- étape 3 : ajout des derniers termes de même signe --}
     if npos > 0 then
        for i:=1 to npos do
	   accu := accu + pos[i]
        else
	   for i:=1 to nneg do
	      accu := accu + neg[i];
     somme := accu;
  end;

Une autre solution consiste à travailler avec des entiers "beaucoup"
plus grands.

Calcul de la puissance d'un nombre réel
---------------------------------------
Il n'existe pas de fonction puissance sous Pascal, et plutôt que de
répéter `x * x * x * ...` dans une instruction, il est parfois utile
d'en implémenter une rapidement.  L'avantage de la méthode récursive
(cf.  D. Knuth, *The Art of Computer Programming*, Addison Wesley, 2ème
éd., 1981) est qu'elle requiert environ `log2(n)` multiplications,
contrairement à la solution itérative classique qui nécessite n-1
multiplications.

Voici la fonction classique ::

  function puissance(x : real; n : integer): real;
  {méthode classique
   N.B.: traite les cas n<0, n=0 et n>0}
  var
     i   : integer;

  begin
     if n = 0 then
        puissance := 1.0
     else if n > 0 then
     begin
        puissance := x;
        for i:=2 to n do
	   puissance := puissance * x
     end
     else
     begin
        puissance := 1/x;
        for i:=2 to abs(n) do
	   puissance := puissance * 1/x
     end
  end; { puissance }

et une variante ::

  function puissance2(x : real; n : integer): real;
  {méthode récursive de la chaîne chinoise
   N.B.: implémentée pour les puissances positives}
  var
     moitie : real;

  begin
     if n = 0 then
        puissance2 := 1.0
     else
     begin
        moitie := puissance2(x, n div 2);
        puissance2 := sqr(moitie);
        if (n mod 2 = 1) then
	   puissance2 := puissance2 * x
     end;
  end; { puissance2 }

Le programme `puissance.pas`_ permet de tester ces deux fonctions.

.. _puissance.pas: src/puissance.pas

Estimation de pi par la méthode de Monte Carlo
----------------------------------------------
Plusieurs méthodes d'estimation de pi existent et sont plus ou moins
facilement implémentables en Pascal. La méthode de Monte Carlo est une
méthode très simple de simulation qui consiste à

Voici le programme correspondant, `pi.pas`_ ::

  program calcul_pi;
  { calcul de pi par la m-béthode de Monte Carlo }

  var
     x, y	      : real;
     d2	      : real;
     pi	      : real;
     np, nc, nr : integer; (* nb points tirés, nb points ok, nb répétitions *)
     i, j	      : integer;

  function aleat: real;
  begin
     aleat := random(32766)/32767;
  end; { aleat }

  { -- bloc principal --}
  begin
     write('Combien de points ? ');
     readln(np);
     write('Combien de répétitions ? ');
     readln(nr);
     randomize;
     for i:=1 to nr do
     begin
        pi := 0.0;
        nc := 0;
        for j:=1 to np do
        begin
  	   x := aleat;
	   y := aleat;
	   d2 := (x-0.5)*(x-0.5) + (y-0.5)*(y-0.5);
	   if d2 <= 0.25 then
	      nc := nc + 1;
        end;
        pi := (4.0*nc)/np;
        writeln('estimation de pi avec ', np, ' points : ', pi);
     end;
  end.

.. TODO: compléter avec Gentle (2003). *Random Number Generation and
 		 Monte Carlo Methods*. Springer-Verlag (2nd Edition).

.. _pi.pas: src/pi.pas

Représentation des nombres réels
--------------------------------
.. TODO: à faire

Associativité de la multiplication
----------------------------------
.. TODO: à faire

Echange de valeurs
------------------
L'échange du contenu de deux variables (`a` prend la valeur de `b` et
réciproquement) peut se faire de plusieurs manières, et dépend du type
de langage utilisé.  Le plus souvent, on utilise une variable
auxiliaire (avec passage par valeur, ou en définissant une fonction
d'échange avec passage des paramètres par adresse [#]_), mais il est
possible d'échanger la valeur de 2 variables sans utiliser une telle
variable auxiliaire. Par exemple, les instructions suivantes
permettent d'échanger le contenu des variables `a` et `b`::

   x := x + y;
   y := x - y;
   x := x - y;

Cependant, cette méthode n'est pas une bonne façon de procéder à la
permutation des valeurs de 2 variables, notamment lorsque les
variables sont de type réel. En effet, si `a = 1E+8` et `b=1E-6`, `a`
et `b` auront la même valeur après l'échange. Pourquoi ? Parce que
l'écart entre ces deux valeurs dépassent la précision en machine et
`1E+8+1E-6 = 1E+8`.

.. _echange.pas: ./src/echange.pas

Comparaison de deux réels
-------------------------
On évitera de tester directement l'égalité entre deux réels, du type
``if (a == b)``, dans la mesure où ceux-ci peuvent différer à cause de
la précision machine.  On trouve souvent le test suivant (EPS
désignant une constante très petite, e.g. 1E-6) ::

   if (fabs (x - y) < EPS

Knuth [Knut1997]_ recommande cependant de privilégier ::

   if (fabs (x - y) < fabs(x)*EPS

puisque cela permet de s'affranchir du problème lié à une éventuelle
différence entre x et y qui dépasserait la précision machine. En
effet, si (...)  (texte à revoir)
[voir également http://www.faqs.org/faqs/C-faq/faq/, sec. 14.5]

.. _testfloat.c: ./src/testfloat.c

Résolution d'équation du 2ème degré
-----------------------------------

Les solutions classiques d'un polynôme du deuxième degré en `x`,
`ax²+bx+c=0`, (en supposant `a` différent de 0, sinon on se ramène à
un problème du premier degré), sont obtenues classiquement comme suit :

- si `delta > 0`, il existe 2 solutions distinctes :
         `x = (-b +/- sqrt(delta))/2a`
- si `delta = 0`, il existe une solution double :
         `x = -b/2a`
- si `delta < 0`, il n'y a pas de solution réelle.

Une des conséquences de la représentation des réels en machine est que
l'addition ou la soustraction de valeurs très proches (ici, `-b` et
`sqrt(delta)`) peut amener des résultats totalement inexacts.

Voici un exemple en Pascal (`trinome.pas`_) ::

  program trinome;

  const EPS = 1E-10;

  var
     a, b, c : real;
     delta   : real;
     x1, x2  : real;

  function sign(D : real): integer;
  begin
     if D > 0.0 then
        sign := +1
     else if D < 0.0 then
        sign := -1
     else
        sign := 0
  end; {sign}

  begin
     write('a = ');
     readln(a);
     write('b = ');
     readln(b);
     write('c = ');
     readln(c);
     delta := b*b - 4*a*c;
     if delta >= 0 then
     begin
        x1 := (-b - sign(b) * sqr(delta))/(2.0*a);
        x2 := c/(a*x1);
	if delta < EPS then
	   writeln('la racine double est : x = ', x1:8:4)
	else
           writeln('les racines réelles sont x1 = ', x1:8:4, ' et x2 = ', x2:8:4)
     end
     else
        writeln('pas de racines réelles.')
  end.

On pourrait bien évidemment raffiner le programme pour calculer
également les racines complexes, selon le même schéma (voir
`trinome2.c`_).

.. _trinome.pas: ./src/trinome.pas
.. _trinome2.c: ./src/trinome2.c

Suites et séries numériques
===========================

Calcul de racine
----------------
On peut approximer la valeur de la racine de `a` à l'aide d'une simple
suite numérique, définie telle que::

  u0 = 10, u(n+1)=un+a/un+1.

En Pascal, cela donne (`racine.pas`_)::

  program suite1;

  const Precision = 1E-9;

  var
     n	  : integer;
     a	  : integer;
     u, v : real;

  begin
     n := 1;
     write('a = ');
     readln(a);
     write('u0 = ');
     readln(u);
     repeat
        v := u;
        u := (u+a)/(u+1);
        writeln('u', n, ' = ', u:16:15);
        n := n+1
     until abs(u-v) < Precision
  end.

Rien de bien extraordinaire là, mais cela permet de construire, sur le
même principe, des calculs sur des suites beaucoup plus complexes,
Notons au passage que l'on n'a pas construit une fonction `suite` qui
renverrait le terme demandé, mais qu'on a utilisé une solution
itérative. Dans de nombreux cas, cela est suffisant, mais on peut
vouloir implémenter des solutions récursives. Les suites se prêtent
en effet par excellence à l'utilisation de la récurrence, et on
exploitera au mieux la notion de récursivité, comme dans le calcul des
termes de la fonction d'Ackerman (cf. infra_).

.. TODO: revoir ce paragraphe et compléter avec :
	 - les problèmes engendrés par la récursivité (pile d'appels
           de fonction (cf. § suivante)
	 - la dérécursivation

.. _racine.pas: ./src/racine.pas

Suite de Fibonacci
------------------

Pour la petite histoire, la suite de Fibonacci modélise la croissance
des lapins

.. TODO: revoir ce paragraphe

Voici une solution récursive::

  function fibo_rec(n:integer):longint; {Les résultats obtenus sont grands!}
  begin
     if n=0 then
        fibo_rec:=1
     else if n=1 then
        fibo_rec:=1
     else
        fibo_rec:=fibo_rec(n-1)+fibo_rec(n-2)
  end;

La solution itérative, exposée ci-dessous, est préférable à la
procédure récursive car cette dernière entraîne l'évaluation répétée
des mêmes expressions : par exemple, pour obtenir `F(5)`, on calcule
`F(4)` et `F(3)`, sachant que `F(4)` est calculée à partir de `F(3)`
et `F(2)` -- on évalue donc deux fois `F(3)`, pour le seul calcul de
`F(5)`... ce qui à terme risque de poser de sérieux problèmes en
termes de performances.

.. figure:: img/ch1-Z-G-13.gif
   :scale: 100
   :alt: fibo_rec(5)
   :align: center
   :target: img/ch1-Z-G-13.gif

   Fig. 1 - Illustration des étapes de calcul de fibo_rec(5) (Tiré de
   [b]_, fig 1.5)

On peut comparer les temps d'exécution des 2 fonctions afin de
s'apercevoir que la solution itérative est de loin la meilleure, dès
que n dépasse 30 (j'utilise pour ma part un pentium M à 1.7 GHz). Bien
évidemment, l'évaluation de la fonction récursive pour n=500 est hors
de propos (en Pascal ou en C). Voici une solution itérative
(`fibonacci.pas`_)::

  function fibo_iter(n:integer):longint;
  var
     tab : array[0..MAX] of longint;
     i	 : integer;
  begin
     tab[0]:=1;
     tab[1]:=1;
     for i:=2 to n do
     begin
        tab[i]:=tab[i-1]+tab[i-2]
     end;
     fibo_iter:=tab[n];
  end;

:Remarque:
	A propos de la solution récursive, lors du calcul de la factorielle
	d'un nombre, Maple utilise une astuce (`option remember`) qui permet
	de conserver les valeurs intermédiaires : ainsi, pour calculer 5000!,
	on pourra calculer successivement 1000!, 2000!, 3000!, 4000! et 5000!
	à l'aide d'une fonction du type::

	  fact:=proc(n) option remember;
	  if n=1 then 1; else n*fact(n-1) fi;
	  end;

Le calcul par dichotomie -- selon que n est pair ou impair -- permet
d'améliorer sensiblement la rapidité de l'évaluation, lorsque n est
grand ; les formules de calcul sont les suivantes ::

  F(2p)= (2×F(p+1)-F(p))×F(p), F(2p+1)= F^2(p+1)+F^2(p)

En utilisant bc, cela donne [a]_::

        scale=0;
        define fib(n) {
          auto a, b;
          if(n<3) {
            if(n==0) return 0;
            return 1;
          }
          a = fib(n/2); b = fib(n/2+1)
          if(n%2) return b^2 + a^2;
          return (2*b-a)*a ;
        }
        fib(3000);
        quit;

On peut également utiliser la propriété suivante : `pour 0<= k<= n-2,
F(n)=F(k+2)*F(n-k-1)+F(k+1)*F(n-k-2)` ; cela permet de ne calculer
qu'une petite partie des nombres de Fibonacci précédant `F(n)` (le gain
de temps est d'environ 125 %). Par
exemple, en prenant `k+1=50`, on ne calcule que 2 nombres de Fibonacci
consécutifs toutes les 50 positions.

On peut même évaluer cette fonction pour n=3000 en Scheme [a]_ ::

        1 ]=> (define (F n) (Fs n 1 0))
        (define (Fs n s c)
           (if (= n 0)
             c
             (Fs (- n 1) (+ s c) s)))

        ;Value: f

        1 ]=>
        ;Value: fs

        1 ]=> (F 3000)

qui donne comme résultat ::

  41061588630797126033356837871926710522012510863736925240888543092690
  55842741134037313304916608500445608300368357069422745885693621454765
  02674373045446852160486606292497360503469773453733196887405847255290
  08204908690751262205905454219588975803110922267084927479385953913331
  83712447955431476110732762400667379340851917318109932017067768389347
  66764778739502174470268627820918553842225858306408301661862900358266
  85723821023580250435195147299791967652400478423637645334726836415264
  83462458405732142414199379172429186026398100978669423920154046201538
  18671425739835074851396421139982713640679581178458198658692285968043
  243656709796000

.. [a] http://perso.wanadoo.fr/jean-paul.davalan/divers/fibonacci/f02.html#PROG
.. [b] http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_1.2.1
.. _fibonacci.pas: ./src/fibonacci.pas

Fonction d'Ackerman
-------------------
.. _infra:

On appelle fonction d'Ackerman la fonction définie de N² dans N par :

F(x,y) = y+1, si x=0

       = F(x-1,1), si y=0

       = F(x-1,F(x,y-1)), si x<>0 et y<>0

Cette fonction est en apparence banale, mais peut se révèler très
complexe lorsqu'il s'agit d'énumérer les étapes intermédiaires de
calcul (à la différence de l'algorithme récursif de la suite de
Fibonacci, pour lequel il s'agit simplement de répéter ou réécrire des
calculs déjà effectués au préalable). Par exemple, pour calculer
`F(0,2)`, la réponse est immédiate : `F(0,2)=3`. En fait, dès qu'on tombe
dans le cas x=0, c'est rapide ! Maintenant, calculons juste `F(2,0)` :

`F(2,0)=F(1,1)=F(0,F(1,0))=F(0,F(0,1))=F(0,2)=3`

ou (autre méthode) :

`F(2,0)=F(1,1)=F(0,F(1,0))=F(1,0)+1=F(0,1)+1=3`

En fait, on peut montrer que pour tout y (entier naturel) :

F(0,y) = y+1

F(1,y) = y+2

F(2,y) = 2y+3

F(3,y) = 8*(2y-3)

Mais, pour x > 3, il n'existe plus de procédé systématique de
calcul. Lorsque l'on songe que F(3,10)=8189, il est évident que son
calcul manuel relève du défi...

La fonction d'Ackerman peut donc être évaluée comme suit
(`ackerman.pas`_) ::

  function func(x, y : integer) : integer;
  begin
     if x = 0 then
        func := y+1
     else
        if y = 0 then
	   func := func(x-1, 1)
        else
	   func := func(x-1, func(x, y-1))
  end; { func }

On notera qu'il existe d'autres définitions de la fonction d'ACkerman
(cf. http://perso.wanadoo.fr/jean-paul.davalan/mots/suites/ack/), mais
qu'elles sont toutes basées sur la fonction définie ci-dessus, qui est
celle proposée par Ackerman.

Dans l'ouvrage de Abelson et al. [b]_, on trouve une procédure de
calcul de la fonction d'Ackerman, écrite en Scheme ::

 (define (A x y)
   (cond ((= y 0) 0)
         ((= x 0) (* 2 y))
         ((= y 1) 2)
         (else (A (- x 1)
                  (A x (- y 1))))))

On voit ici la concision avec laquelle ce langage permet de
représenter des fonctions mathématiques. C'est ici bien évidemment une
solution récursive, puisque le langage fonctionnel Scheme repose
exclusivement sur ce mode d'évaluation, mais...

.. _ackerman.pas: ./src/ackerman.pas

Relations binaires
------------------




Polynômes de Legendre
---------------------

Arithmétique
============

Calcul de pgcd
--------------

Le type integer ne convient pas à la manipulation de très grands
entiers, en raison de la capacité de représentation de tels nombres
(limitée à 32765). La représentation des entiers en machine peut se
faire de différentes manières :

- utiliser un type constitué de tableaux de nombres de type integer
  classique mais écrits en base 10 (ou 100)

- modifier le type réel (e.g. real en Pascal) existant

La première méthode (dite de *calcul en précision multiple*) impose de
recréer également l'ensemble des opérations arithmétiques courantes :
addition, multiplication et division euclidienne. La deuxième méthode
est plus rapide, mais exige de limiter l'étendue des nombres utilisés,
de façon à obtenir des calculs exacts.

Notons que l'exercice est un exercice de forme car la plupart des
compilateurs autorise l'usage de type prédéfini pour les entiers
(e.g. ??). D'autre part, en Pascal, le type `longint` permet également
de travailler avec des nombres entiers plus grands.

Pour calculer le pgcd de 2 nombres entiers, on a besoin de 2 fonctions
arithmétiques spéciales : le calcul de la partie entière et la
division euclidienne (avec le calcul du reste entier). On suppose
qu'on a défini le type entier à partir du type prédéfini réel,
e.g. `type entier = real;`. Une solution possible pour ces trois
fonctions est la suivante ::

  function ent(x: entier): entier;
  var s : entier;

  begin
     s := int(x);
     if (x < 0) and (s <> x) then
        s := s-1;
     ent := s
  end; { ent }

  function div_e(x, y : entier) : entier;
  var q : entier;

  begin
     q := x/y;
     div_e := ent(q)
  end; { div_e }

  function mod_e(x, y : entier) : entier;
  begin
     mod_e := x - div_e(x, y)*y
  end; { mod_e }

Cela permet d'écrire une fonction de calcul du pgcd (`pgcd.pas`_) sous
la forme ::

  function pgcd(x, y: entier) : entier;
  var r : entier;

  begin
     x := abs(x);
     y := abs(y);
     if x < y then
     begin
        r := x;
        x := y;
        y := r
     end;
     while y <> 0 do
     begin
        r := mod_e(x, y);
        x := y;
        y := r
     end;
     pgcd := x
  end; { pgcd }

.. _pgcd.pas: ./src/pgcd.pas

Numération
----------

Combinatoire
============

Partitions
----------
.. TODO: décrire intérêt en statistique multidimensionnelle
			(e.g. k-means (?) ou classification)

Permutations
------------
.. TODO: décrire les 2 méthodes de Knuth + intérêt pour les statistiques


On peut tester le programme à l'aide de `test_perms.pas`_, en donnant
comme série {1,3,5,4,2}. Le programme indique que le rang de cette
permutation de 5 éléments est 12.

On peut vérifier que le rang indiqué (12) correspond à celui que donne
*Mathematica* ::

  ln[5]:= Permutations[{1,2,3,4,5}]
  Out[5]= {{1, 2, 3, 4, 5}, {1, 2, 3, 5, 4}, {1, 2, 4, 3, 5}, {1, 2, 4, 5, 3},

  >    {1, 2, 5, 3, 4}, {1, 2, 5, 4, 3}, {1, 3, 2, 4, 5}, {1, 3, 2, 5, 4},

  >    {1, 3, 4, 2, 5}, {1, 3, 4, 5, 2}, {1, 3, 5, 2, 4}, {1, 3, 5, 4, 2},
                                                          ^^^^^^^^^^^^^^^
  >    {1, 4, 2, 3, 5}, {1, 4, 2, 5, 3}, {1, 4, 3, 2, 5}, {1, 4, 3, 5, 2},

  >    {1, 4, 5, 2, 3}, {1, 4, 5, 3, 2}, {1, 5, 2, 3, 4}, {1, 5, 2, 4, 3},

  > ...


Notons que la bibliothèque STL de C++ définit des fonctions pour
travailler avec les permutations, dans `stl_algo.h` (généralement dans
``/usr/include/c++/4.0/bits``). Il suffit d'inclure la bibliothèque
``algorithm`` pour pouvoir utiliser ces fonctions ::

  $ grep permutation stl_algo.h
  // next_permutation and prev_permutation, with and without an explicitly
   *  @return  False if wrapped to first permutation, true otherwise.
   *  Treats all permutations of the range as a set of "dictionary" sorted
    next_permutation(_BidirectionalIterator __first,
   *  @return  False if wrapped to first permutation, true otherwise.
   *  Treats all permutations of the range [first,last) as a set of
    next_permutation(_BidirectionalIterator __first,
   *  @return  False if wrapped to last permutation, true otherwise.
   *  Treats all permutations of the range as a set of "dictionary" sorted
    prev_permutation(_BidirectionalIterator __first,
   *  @return  False if wrapped to last permutation, true otherwise.
   *  Treats all permutations of the range [first,last) as a set of
    prev_permutation(_BidirectionalIterator __first,

Le programme `permutation.cc`_ permet de tester très brièvement la
génération de permutations en utilisant C++.

.. _perms.pas: src/perms.pas
.. _test_perms.pas: src/test_perms.pas
.. _permutation.cc: src/permutation.cc


Calcul matriciel
================

Résolution d'un système d'équations (Gauss)
-------------------------------------------


.. _gauss.c: ./src/gauss.c

Calcul de l'inverse d'une matrice
---------------------------------

Algorithme de Gauss-Jordan
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. _gauss.pas: ./src/gauss.pas

Méthode de Pan & Reiff
~~~~~~~~~~~~~~~~~~~~~~

Méthode de Gréville
~~~~~~~~~~~~~~~~~~~

.. _inverse.pas: ./src/inverse.pas
.. _inverse.c: ./src/inverse.c

.. TODO: sections à ajouter :
	 - dichotomie
	 - euler
	 - runge-kutta
	 - equa diff
	 - graphe
	 - matrice
	 - plus court chemin (dijkstra)



Références
==========



.. [Bers1991] Berstel, J., Pin, J.-E. et Pocchiola, M. (1991). *Mathématiques et Informatique, 1. Algèbre*. McGraw-Hill.
.. [Knut1997] Knuth, D.E. (1997). *The Art of Computer Programming, Volume 1: Fundamental Algorithms*. Addison-Wesley.
.. [Boug1993] Bougé, L., Kenyon, C., Muller, J.-M., Robert, Y. (1993). Algorithmique - Exercices corrigés, Oral du concours d'entrée à l'Ecole Normale Supérieure de Lyon. (Ellipses)
.. [Dela1996] Delannoy, C. (1996). Exercices en Turbo-Pascal. (Eyrolles)
.. [web] http://www.cs.sunysb.edu/~algorith/ ; http://www2.toki.or.id/book/AlgDesignManual/


**Notes**

.. [#] ou encore en définissant une macro, par exemple en C::

	#define echange(a,b)

** [2006-10-26 Jeu] Notes R
<R internals>

- structure de données :
Les variables ou objets sont des symboles associés à une valeur. La
valeur peut être vue comme une SEXP (pointeur), ou la structure
pointée, une SEXPREC (ou pour des vecteurs, une VECSXP pointant sur
des structures de type VECTOR_SEXPREC). Les briques de base de R
s'appellent des noeuds (SEXPREC ou VECTOR_SEXPREC). Chacune de ces
structures nodales possède comme trois premiers champs : un en-tête
32-bits sxpinfo, puis 3 pointeurs (sur les attributs, ainsi que le
noeud suivant et précédent, dans une liste doublement chaînée), puis
d'autres champs. Sur une plateforme 32-bits, un noeud occupe 28
bytes. Les 5 premiers bits de l'en-tête spxinfo spécifient l'un des 32
SEXPTYPE.
L'en-tête sxpinfo est une structure C définie comme suit :

  struct sxpinfo_struct {
  	 SEXPTYPE type	    : 5;
	 unsigned int obj   : 1;
	 unsigned int named : 2;
	 unsigned int gp    : 16;
	 unsigned int mark  : 1;
	 unsigned int debug : 1;
	 unsigned int trace : 1;
	 unsigned int spare : 1;
	 unsigned int gcgen : 1;
	 unsigned int gccls : 3;
  };

Le champ named est rempli et accessible par les macros SET_NAMED et
NAMED. Il prend les valeurs 0, 1 et 2. R possède en apparence une
procédure d'appel par valeur, de sorte qu'une affectation de type

  b <- a

apparaît créer une copie de a et y référer par b. Cependant, si a et b
ne sont pas altérés ultérieurement, il n'y a pas besoin de faire une
recopie. Ce qui se passe réellement c'est qu'un nouveau symbole b est
associé à la même valeur que a et le champ named de l'objet est
renseigné (valeur à 2). Lorsqu'un objet va être modifié, le champ
named est consulté. Une valeur de 2 signifie que cet objet doit être
dupliqué avant d'être modifié. Une valeur à 0 signifie que l'on sait
qu'aucune autre SEXP ne partage de données avec cet objet, et qu'il
peut par conséquent être modifié sans danger. La valeur 1 est réservée
aux situations comme

  dim(a) <- c(7,2)

où en principe deux copies existent pour la durée du calcul comme

  a <- 'dim<-'(a,c(7,2))

mais pas plus longtemps, et donc certaines fonctions peuvent être
optimisées pour éviter la recopie dans ce cas.

Une SEXPREC est une structure C qui contient le header 32-bits, 3
pointeurs (attributs, noeud suivant, noeud précédent) et un noeud
données, qui est une union :

  union {
  	struct primsxp_struct primsxp;
	struct symsxp_struct symsxp;
	struct listsxp_struct listsxp;
	struct envsxp_struct envsxp;
	struct closxp_struct closxp;
	struct promsxp_struct promsxp;
  } u;

Toutes ces alternatives, sauf la première (un entier) consistent en 3
pointeurs, de sorte que l'union occupe 3 words.


- gestion de l'environnement :
Lorsque R démarre, les fonctions internes sont installées (par du code
C) dans la table de symboles, les fonctions primitives ayant des
valeurs et les fonctions .Internal ayant pour valeurs ce qui est
présent dans la macro INTERNAL. Puis, .Platform et .Machine sont
évalués et le paquetage de base est chargé dans l'environnement de
base, suivi du profil système.







Test (exact) de Fisher
----------------------

  fisher <- function(tab,n.sim=1000) {
    bot0 <- sum(lgamma(tab+1)) # observed

    bot <- 1:n.sim
    a <- list(rep((row(tab),tab),rep(col(tab),tab))
    for (i in 1:n.sim) {
      a <- lapply(a, sample)
      tab2 <- table(a)
      bot[i] <- sum(lgamma(tab2+1))
    }
    mean(bot0 < bot)
  }

test :

  x <- matrix(c(2,1,3,4,
                4,1,1,6,
	        0,1,0,7), ncol=4, byrow=T)
  fisher(x)
  fisher(x,500)


Exemple de simulation pour lm() et glm()
----------------------------------------

Utile pour ajouter des valeurs manquantes à un vecteur de données et
tester la qualité du modèle (ic, y = 0.5*x1 - x2 + eps)

  mydata <- data.frame(x1=rnorm(100),x2=rnorm(100))
  mydata$y <- 0.5*mydata$x1 - mydata$x2 + rnorm(100,0,0.2)
  mydata$y[sample(1:100,10)] <- NA

  o1 <- lm(y ~ x1 + x2, data=mydata)
  o2 <- lm(y ~ -1 + x1 + x2, data=mydata)
  summary(o2)
  plot(o1$fitted,o1$resid)
  abline(h=0)

  mydata$y2 <- rbinom(100,5,exp(mydata$x1)/(1+exp(mydata$x1)))
  mydata$y2 <- mydata$y2/5
  mydata$n <- rep(5,100)
  o3 <- glm(y2 ~ x1 + x2,family=binomial(link=logit),data=mydata,weights=n)

Graphiques
----------

From R-FAQ.txt
To rotate axis labels (using base graphics), you need to use text(), rather than mtext(), as the latter does not support par("srt").

     ## Increase bottom margin to make room for rotated labels
     par(mar = c(7, 4, 4, 2) + 0.1)
     ## Create plot with no x axis and no x axis label
     plot(1 : 8, xaxt = "n",  xlab = "")
     ## Set up x axis with tick marks alone
     axis(1, labels = FALSE)
     ## Create some text labels
     labels <- paste("Label", 1:8, sep = " ")
     ## Plot x axis labels at default tick marks
     text(1:8, par("usr")[3] - 0.25, srt = 45, adj = 1,
          labels = labels, xpd = TRUE)
     ## Plot x axis label at line 6 (of 7)
     mtext(1, text = "X Axis Label", line = 6)


Calcul numérique (précision)
----------------------------

From R-FAQ.txt
The only numbers that can be represented exactly in R's numeric type are integers and fractions whose denominator is a power of 2. Other numbers have to be rounded to (typically) 53 binary digits accuracy. As a result, two floating point numbers will not reliably be equal unless they have been computed by the same algorithm, and not always even then. For example

     R> a <- sqrt(2)
     R> a * a == 2
     [1] FALSE
     R> a * a - 2
     [1] 4.440892e-16
The function all.equal() compares two objects using a numeric tolerance of .Machine$double.eps ^ 0.5. If you want much greater accuracy than this you will need to consider error propagation carefully.

One way is to use paste() (or sprintf()) to concatenate a stem filename and the iteration number while file.path() constructs the path. For example, to save results into files result1.rda, ..., result100.rda in the subdirectory Results of the current working directory, one can use

     for(i in 1:100) {
       ## Calculations constructing "some_object" ...
       fp <- file.path("Results", paste("result", i, ".rda", sep = ""))
       save(list = "some_object", file = fp)
     }


Configuration interne (variables d'environnement)
-------------------------------------------------

R CMD config

** [2006-12-30 Sam] RMS mail
Relay-Version: version B 2.10 5/3/83; site utzoo.UUCP
Posting-Version: version B 2.10.1 6/24/83; site mit-eddie.UUCP
From: RMS@MIT-OZ@mit-eddie.UUCP (Richard Stallman)
Newsgroups: net.unix-wizards,net.usoft
Subject: new UNIX implementation
Message-ID: <771@mit-eddie.UUCP>
Date: Tue, 27-Sep-83 13:35:59 EDT
Article-I.D.: mit-eddi.771
Posted: Tue Sep 27 13:35:59 1983
Date-Received: Thu, 29-Sep-83 07:38:11 EDT
Organization: MIT AI Lab, Cambridge, MA
Lines: 90


Free Unix!

Starting this Thanksgiving I am going to write a complete
Unix-compatible software system called GNU (for Gnu's Not Unix), and
give it away free to everyone who can use it.  Contributions of time,
money, programs and equipment are greatly needed.

To begin with, GNU will be a kernel plus all the utilities needed to
write and run C programs: editor, shell, C compiler, linker,
assembler, and a few other things.  After this we will add a text
formatter, a YACC, an Empire game, a spreadsheet, and hundreds of
other things.  We hope to supply, eventually, everything useful that
normally comes with a Unix system, and anything else useful, including
on-line and hardcopy documentation.

GNU will be able to run Unix programs, but will not be identical
to Unix.  We will make all improvements that are convenient, based
on our experience with other operating systems.  In particular,
we plan to have longer filenames, file version numbers, a crashproof
file system, filename completion perhaps, terminal-independent
display support, and eventually a Lisp-based window system through
which several Lisp programs and ordinary Unix programs can share a screen.
Both C and Lisp will be available as system programming languages.
We will have network software based on MIT's chaosnet protocol,
far superior to UUCP.  We may also have something compatible
with UUCP.


Who Am I?

I am Richard Stallman, inventor of the original much-imitated EMACS
editor, now at the Artificial Intelligence Lab at MIT.  I have worked
extensively on compilers, editors, debuggers, command interpreters, the
Incompatible Timesharing System and the Lisp Machine operating system.
I pioneered terminal-independent display support in ITS.  In addition I
have implemented one crashproof file system and two window systems for
Lisp machines.


Why I Must Write GNU

I consider that the golden rule requires that if I like a program I
must share it with other people who like it.  I cannot in good
conscience sign a nondisclosure agreement or a software license
agreement.

So that I can continue to use computers without violating my principles,
I have decided to put together a sufficient body of free software so that
I will be able to get along without any software that is not free.


How You Can Contribute

I am asking computer manufacturers for donations of machines and money.
I'm asking individuals for donations of programs and work.

One computer manufacturer has already offered to provide a machine.  But
we could use more.  One consequence you can expect if you donate
machines is that GNU will run on them at an early date.  The machine had
better be able to operate in a residential area, and not require
sophisticated cooling or power.

Individual programmers can contribute by writing a compatible duplicate
of some Unix utility and giving it to me.  For most projects, such
part-time distributed work would be very hard to coordinate; the
independently-written parts would not work together.  But for the
particular task of replacing Unix, this problem is absent.  Most
interface specifications are fixed by Unix compatibility.  If each
contribution works with the rest of Unix, it will probably work
with the rest of GNU.

If I get donations of money, I may be able to hire a few people full or
part time.  The salary won't be high, but I'm looking for people for
whom knowing they are helping humanity is as important as money.  I view
this as a way of enabling dedicated people to devote their full energies to
working on GNU by sparing them the need to make a living in another way.


For more information, contact me.
Arpanet mail:
  RMS@MIT-MC.ARPA

Usenet:
  ...!mit-eddie!RMS@OZ
  ...!mit-vax!RMS@OZ

US Snail:
  Richard Stallman
  166 Prospect St
  Cambridge, MA 02139

** [2008-03-09 Dim] SQL
Ce document est une mise à jour d'un ensemble de notes rédigées fin 2006, lors
de l'acquisition de mon premier Mac (OS X), après 5 annnées passées sous
Linux. Évidemment, tout est souvent plus simple sous Mac, en particulier la
gestion du serveur Apache, des différents langages d'interface pour le web
(PHP, Perl, Python, Ruby), et la mise en production de bases de données
relationnelles. Plusieurs tutoriels sont disponibles sur le site
http://developer.apple.com/opensource/[developer.apple.com/opensource/].
Toutefois, il s'agit vraiment d'une synthèse des notes que j'ai consignées
durant l'installation des différents outils d'administration de bases de
données, et il existe de bien meilleurs tutoriels ou documents de référence,
sur le web et en librairie.


MySQL
-----

Configuration des droits
~~~~~~~~~~~~~~~~~~~~~~~~

.Remarque
******************************************************************************
Les différentes étapes de configuration décrites dans cette section suppose
une installation manuelle du serveur sur un système Linux. Pour Mac OS X, la
procédure de gestion des processus est largement simplifiée dans la mesure où
la configuration est faite lors de l'installation et un utilitaire de
démarrage automatique ou manuel est installé par défaut.
******************************************************************************

Après avoir installé http://www.mysql.com/[MySQL], il est nécessaire de
configurer la table des droits d'accès. En effet, MySQL repose sur un principe
d'accès restreint qui permet de contrôler quel(s) utilisateur(s) peut accéder
à quelles bases, et quelles commandes il peut exécuter sur celles-ci
(+SELECT+, +DROP+, etc.). Avant toute utilisation de MySQL, on s'assurera au
préalable d'avoir bien lancé le démon, généralement +mysqld+. footnote:[Par
défaut, sous Linux, on peut utiliser les scripts +Sys V+, +/etc/rc.d/mysql
start+.]

Dans un premier temps, il faut créer un (ou plusieurs) utilisateur(s) ; pour
cela, on se connecte en _root_ sur la table +mysql+, qui contient la table des
droits :

------------------------------------------------------------------------------
$ mysql -u root mysql -p
------------------------------------------------------------------------------

et on s'alloue tous les droits (ce n'est pas forcément une bonne idée, mais ça
suffit pour tester les fonctionnalités de MySQL) :

------------------------------------------------------------------------------
GRANT ALL PRIVILEGES ON *.* TO 'utilisateur'@'%'
    IDENTIFIED BY 'mot_de_passe' WITH GRANT OPTION;
------------------------------------------------------------------------------

où +utilisateur+ et +mot_de_passe+ sont bien évidemment à
remplacer par les valeurs souhaitées. On notera que l'on utilisera
+%+ pour inclure n'importe quel domaine pour la connexion. Le cas
échéant, il faut spécifier +localhost+ (lorsqu'on n'est pas connecté
à un réseau) et le nom d'hôte renvoyé par

------------------------------------------------------------------------------
$ hostname
------------------------------------------------------------------------------

Dans la commande +sql+ décrite plus haut, on a donné tous les privilèges à
l'utilisateur +utilisateur+. Pour rendre effectives les modifications, il faut
en plus taper

------------------------------------------------------------------------------
FLUSH PRIVILEGES;
------------------------------------------------------------------------------

En effet, pour améliorer la rapidité, MySQL dispose d'une copie de la base de
données +mysql+ en mémoire, et celle-ci est actualisée par la commande +FLUSH
PRIVILEGES+.

On peut ensuite vérifier que le compte +utilisateur+ est présent dans la table
des droits (on travaille toujours sous l'identité _root_) :

------------------------------------------------------------------------------
SELECT user, host, password FROM user;
------------------------------------------------------------------------------

On peut ensuite quitter la ligne de commande avec +quit;+ et se
reconnecter sous l'identifiant nouvellement crée :

------------------------------------------------------------------------------
$ mysql -u chl -p
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 7 to server version: 5.0.26-max

Type 'help;' or '\h' for help. Type '\c' to clear the buffer.

mysql>
------------------------------------------------------------------------------

Création d'une base de test
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Cas général
^^^^^^^^^^^
En premier lieu, il est nécessaire de créer une nouvelle base, avec la
commande :

------------------------------------------------------------------------------
CREATE DATABASE my_test;
------------------------------------------------------------------------------

On pourra vérifier que la base a bien été créer en tapant

------------------------------------------------------------------------------
mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| my_test            |
| mysql              |
| test               |
+--------------------+
4 rows in set (0.00 sec)
------------------------------------------------------------------------------

Notons que l'on pourrait utiliser la base +test+ puisque celle-ci est
fournie par défaut lors de l'installation (cf. note ci-dessous).
Puis on indique que l'on travaille sur celle-ci (les nouvelles
commandes `sql` s'appliqueront désormais sur la base +my_test+) :

[TIP]
.À propos des connexions sur des tables SQL
==============================================================================
Par défaut également, les connexions anonymes sont autorisées et n'importe qui
peut agir sur cette base de test. En fait, toutes les bases débutant par
+test+ sont accessibles aux utilisateurs. On peut préférer une autre solution
qui consiste à permettre à chaque utilisateur de créer sa propre base, en la
préfixant par son nom d'utilisateur, e.g. +dupont_unebase+. Pour cela, on ne
peut pas utiliser directement +GRANT+, car celle-ci n'autorise pas la saisie
de caractères génériques, et on est obligé de jongler un peu :

------------------------------------------------------------------------------
USE my_test;
GRANT USAGE ON *.* TO username@localhost IDENTIFIED BY 'xxx';
INSERT INTO mysql.db
         (Host, Db, User, Select_priv, Insert_priv, Update_priv,
	 Delete_priv, Create_priv, Drop_priv, Grant_priv, Reference_priv,
	 Index_priv, Index_prov, Alter_priv, Create_tmp_table_priv,
	 Lock_tables_priv, Create_view_priv, Show_view_priv)
       VALUES
	 ('localhost', 'username%', 'username', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y',
	 'N', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y');
FLUSH PRIVILEGES;
------------------------------------------------------------------------------

On effectue ainsi les modifications nécessaires directement dans la base +db+,
et les noms de bases de données autorisés sont constitués de +username+ suivi
de n'importe quel nombre de caractères (cf. le joker +%+). La première
commande (+GRANT+...) sert à créer les utilisateurs si besoin.
==============================================================================

On peut ensuite créer notre première table, par exemple une table incluant un
identifiant unique, automatiquement attribué, un score et une date de saisie.

------------------------------------------------------------------------------
CREATE TABLE une_table (
    id INT NOT NULL AUTO_INCREMENT,
    choice TINYINT NOT NULL,
    ts TIMESTAMP,
    PRIMARY KEY (id));
------------------------------------------------------------------------------

On notera que l'on a définit la clé primaire sur le champ +id+, et que les
champs +id+ et +choice+ doivent obligatoirement être renseignés (attribut +NOT
NULL+).

Ensuite, on peut commencer à alimenter la base avec des données :

------------------------------------------------------------------------------
INSERT INTO une_table (choice) VALUES (3);
INSERT INTO une_table (choice) VALUES (5);
------------------------------------------------------------------------------

On peut vérifier l'état de la base avec la construction classique
+SELECT ... FROM ...+ :

------------------------------------------------------------------------------
SELECT COUNT(choice) FROM une_table;
+---------------+
| COUNT(choice) |
+---------------+
|             2 |
+---------------+
1 row in set (0.00 sec)
------------------------------------------------------------------------------

Le résultat indique le nombre d'enregistrements présents dans la table
+une_table+ (dans le cas présent, 2 enregistrements).

Plutôt que de remplir manuellement la base avec la clause +INSERT+, on peut
charger directement un fichier texte contenant les valeurs à ajouter. De même,
on peut créer le tableau de données à l'aide d'un tableur, puis exporter la
feuille de données au format txt (ou csv), en spécifiant un séparateur
(tabulation ou +;+). Pour charger les données dans la table, il suffira de
taper :

------------------------------------------------------------------------------
LOAD DATA INFILE '~/un_fichier.txt' INTO TABLE une_table
     FIELDS OPTIONALLY ENCLOSED BY '"';
------------------------------------------------------------------------------

On se rappelera que la tabulation est le séparateur de données par défaut sous
MySQL. Si le fichier texte utilise le +;+ comme séparateur de données, il faut
le préciser lors de l'appel. Si tout se passe bien, on a le message suivant :

------------------------------------------------------------------------------
Query OK, 8 rows affected (0.00 sec)
Records: 8  Deleted: 0  Skipped: 0  Warnings: 0
------------------------------------------------------------------------------

On a bien rajouté 8 enregistrements provenant du fichier, et on peut vérifier
que la table comporte à présent 10 enregistrements (les 2 crées manuellement +
les 8 importés) :

------------------------------------------------------------------------------
SELECT COUNT(choice) FROM une_table;
+---------------+
| COUNT(choice) |
+---------------+
|            10 |
+---------------+
1 row in set (0.00 sec)
------------------------------------------------------------------------------

Pour un script d'importation automatique en PHP, voir
http://www.infres.enst.fr/~danzart/mysql/mysqlimporte.phtml

Outils SQL sous Mac OS X
^^^^^^^^^^^^^^^^^^^^^^^^
Les mêmes instructions, à l'exception de la gestion des scripts dans +/etc+,
sont sous environnement Mac OS X. Après tout, c'est l'interaction avec un
shell SQL qui a été présentée (certes très succinctement).

Sous Mac OS X, il existe des applicatifs qui ``facilitent'' la gestion des
bases de données (maintenance, requêtes, etc.). Mentionnons en deux :

- http://cocoamysql.sourceforge.net/[CocoaMySQL]
- http://dev.mysql.com/downloads/gui-tools/5.0.html[MySQL GUI Tools]

*CocoaMySQL* est une application permettant de gérer des bases de données
MySQL locales ou en ligne (création, suppression, modification, requêtes,
sauvegardes). Voici à quoi ressemble l'interface générale (ici, connectée à
une simple base de données) :
*MySQL GUI Tools*, proposé sur le site http://dev.mysql.com/[mysql] est un
ensemble de trois applications :

- MySQL Administrator
- MySQL Query Browser
- MySQL Migration Toolkit

Les figures suivantes illustrent la gestion du serveur <<Fig. 1>>, ainsi que
des tables <<Fig. 2>> (*MySQL Administrator*).

[[Fig. 1]]
.Gestionnaire d'administration des bases SQL.
image::MySQL_Administrator1_75pc.png[MySQL_Administrator1_75pc.png]

[[Fig. 2]]
.Gestionnaire d'administration des bases SQL.
image::MySQL_Administrator2_75pc.png[MySQL_Administrator2_75pc.png]

Dans la pratique, j'utilise assez rarement ces utilitaires puisque je
construis mes tables dans des fichiers que je ``source'' directement dans le
shell SQL. Quant aux requêtes, je les effectue généralement directement en
ligne de commande ou à partir d'un script dans un autre langage (R, par
exemple).

Effectuer des requêtes (notions basiques)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
À présent, on peut effectuer des requêtes sur la base pour tester les
fonctionnalités de +mysql+.

Langage de requêtes et exemples
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

[red]#Cette partie est à écrire...#

Interfaces graphiques sous Mac OS X
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Nous avons mentionné dans la section précédente l'existence d'utilitaires
graphiques. Outre l'interface de gestion du serveur +mysql+, les outils
proposés par http://dev.mysql.com/[mysql] incluent un utilitaire de requête. À
l'aide de celui-ci, on peut formuler une requête et visualiser le résultat
dans des fenêtres organisées par onglets <<Fig. 3>>. Ici, on a simplement
effectué une requête de type +SELECT * FROM Fiche+ (dans une base appelée,
+tcf+). La clé primaire est indiquée par un carré dans la colonne
correspondante (ici, +idFiche+). Le nombre de tuples retournés est indiqué
dans la partie basse de l'interface.

[[Fig. 3]]
.Résultat d'une requête dans *MySQL Query Browser*.
image::MySQL_QueryBrowser1_75pc.png[MySQL_QueryBrowser1_75pc.png]

La palette d'outils proposée sur une barre latérale <<Fig. 4>> est assez
commode puisqu'elle contient tous les éléments du langage SQL et propose une
vue des schémas de la base.

[[Fig. 4]]
.Panneau latéral de *MySQL Query Browser*.
image::MySQL_QueryBrowser2_75pc.png[MySQL_QueryBrowser2_75pc.png]

Interfacer SQL avec d'autres langages
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

MySQL et R
^^^^^^^^^^
On peut également utiliser *R* pour interroger notre base. Il y a alors deux
solutions :

- soit on dispose d'un fichier texte dans lequel se trouve les données
  de la base (on aura au préalable exporté celle-ci),
- soit on veut travailler directement en se connectant sur le serveur
  MySQL.

Dans le premier cas, il suffit de charger le fichier avec +read.csv()+ :

------------------------------------------------------------------------------
> a <- read.csv("une_table.csv", header=T)
------------------------------------------------------------------------------

Dans le second cas, on a besoin du paquetage +RODBC+.

------------------------------------------------------------------------------
> install.packages('RODBC')
------------------------------------------------------------------------------

// TODO: revoir cette partie avec ODBC

Le package +RMySQL+ permet de travailler directement avec une base de données
MySQL. La procédure est assez simple puisqu'il suffit de définir un
descripteur pour la connexion (il faut naturellement que le serveur soit
démarré) :

------------------------------------------------------------------------------
> library(RMySQL)
> link <- dbConnect(MySQL(), user="******", password="******",
                    dbname="tcf", host="localhost")
> dbListTables(link)
------------------------------------------------------------------------------

Pour effectuer des requêtes, on utilise la fonction +dbSendQuery()+, par
exemple :

------------------------------------------------------------------------------
> result <- dbSendQuery(link, "SELECT * FROM Correcteur")
------------------------------------------------------------------------------

L'ensemble des résultats est à présent contenu dans la variable +result+. Pour
afficher le résultat, on utilise la fonction +fetch()+ qui prend en argument
la variable précédente.

------------------------------------------------------------------------------
> fetch(result, n=10)
------------------------------------------------------------------------------

MySQL et Perl
^^^^^^^^^^^^^
Pour utiliser l'interface Perl/MySQL, il faut installer le module DBI et
+DBD::mysql+. On peut utiliser l'interface +cpan+ :

------------------------------------------------------------------------------
> sudo perl -MCPAN -e 'install Bundle::DBD::mysql'
------------------------------------------------------------------------------

[CAUTION]
.Problème rencontré sous MacOS X
==============================================================================
Par défaut, Perl s'attend à trouver la librairie (statique)
+libmysqlclient.15.dylib+ dans le répertoire +/usr/local/mysql/lib/mysql/+, or
il semble que depuis les dernières versions de MySQL, celle-ci soit installée
dans le répertoire +/usr/local/mysql/lib/+. On peut imaginer recréer des liens
symboliques pour faire correspondre ces deux répertoires, mais il existe une
méthode plus simple de mise à jour du système de référencement des librairies
sous MacOS X : la commande +install_name_tool+. Voici ce qu'il faut faire (en
_root_) :

------------------------------------------------------------------------------
$ sudo install_name_tool -change
$ /usr/local/mysql/lib/mysql/libmysqlclient.15.dylib
$ /usr/local/mysql/lib/libmysqlclient.15.dylib
$ /Users/chl/.cpan/build/DBD-mysql-4.005/blib/arch/auto/DBD/mysql/mysql.bundle
------------------------------------------------------------------------------

Cette remarque vaut également pour la configuration de
http://www.rubyonrails.org/[Rails].
==============================================================================

Avec Perl, il est nécessaire de définir, comme pour R, le serveur, le nom de
la base, et les informations de connexion (nom d'utilisateur et mot de passe).

------------------------------------------------------------------------------
my $link = DBI->connect("dbi:mysql:$db:$server", $user, $pwd);
------------------------------------------------------------------------------

On forme ensuite la requête sql et on l'exécute :

------------------------------------------------------------------------------
my $query = "show tables";
my $sql   = $link->prepare($query);
$sql->execute();
------------------------------------------------------------------------------

Pour récupérer et afficher les résultats, on peut utiliser une boucle formulée
comme suit :

------------------------------------------------------------------------------
while (my $row = $sql->fetchrow_arrayref) {
  print join("\t", @$row), "\n";
}
------------------------------------------------------------------------------

On n'oubliera pas de refermer la connexion une fois les requêtes effectuées.

------------------------------------------------------------------------------
$link->disconnect;
------------------------------------------------------------------------------

MySQL et Python
^^^^^^^^^^^^^^^
Enfin, on peut également préférer le langage http://www.python.org/[Python]
pour la manipulation et l'interrogation de la base MySQL. Il est nécessaire
dans ce cas d'installer le package +mysql+ pour Python. Sous MacOS X, on peut
le trouver sur le site
http://sourceforge.net/projects/mysql-python/[sourceforge.net/projects/mysql-python/]. Pour
compiler, il suffit de taper :

------------------------------------------------------------------------------
$ python setup.py build
------------------------------------------------------------------------------

puis en root :

------------------------------------------------------------------------------
$ sudo python setup.py install
------------------------------------------------------------------------------

On peut tester l'installation en tentant de se connecter à une base et
en affichant les résultats du requête +SELECT+.

------------------------------------------------------------------------------
>>> import MySQLdb;
>>> link = MySQLdb.connect('localhost','user','pwd','dbName')
>>> curs = link.cursor()
>>> result = curs.execute("select * from Correcteur")
>>> result=curs.fetchall()
>>> print result;
>>> curs.close()
>>> link.close()
------------------------------------------------------------------------------

PostgreSQL
----------
Le site officiel http://www.postgresql.org/[www.postgresql.org] comprend
toutes les ressources nécessaires pour une transition ``en douceur'' de MySQL
à PostgreSQL. Je n'ai jamais testé PostgreSQL sur Linux (encore moins sur
Windows, mais là n'est pas le propos).


Installation de PostgreSQL sur Mac OS X
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
On peut installer +postgresql+ d'au moins 3 façons différentes sous Mac :

- à partir des sources, disponibles sur le site de
  http://www.postgresql.org/download/[postgresql]
- avec +fink+ (http://www.finkproject.org/[www.finkproject.org/])
- avec un package "intégré" disponible sur le site
  http://www.postgresqlformac.com/[www.postgresqlformac.com/]

J'ai personnellement essayé les deux dernières solutions, et la dernière
m'apparaît plus stable et souple à la fois. Si toutefois l'installation est
effectuée via +fink+, on veillera à prendre la version la plus récente :

------------------------------------------------------------------------------
$ fink info postgresql
Information about 6717 packages read in 2 seconds.

postgresql-8.2.6-1: Upgrade package for PostgreSQL
 .
 Web site: http://www.postgresql.org/
 .
 Maintainer: Benjamin Reed <postgresql82@fink.racoonfink.com>
------------------------------------------------------------------------------

Si l'on choisit la http://www.postgresqlformac.com/[dernière solution], il
faut savoir que la suite serveur + outils d'administration est installée dans
le répertoire +/Applications/PostgreSQL+ ainsi que des scripts
d'initialisation dans +/Library/StartupItems/PostgreSQL+. Dans ce cas, le
serveur +postgresql+ est lancé automatiquement lors de la connexion, ce qui
n'est pas nécessairement ce que l'on souhaiterait. On peut supprimer le
dossier en question dans le répertoire +/Library/StartupItems/+ (ou modifier
le fichier +PostgreSQL+, mais je ne sais pas où est initialisée la variable
+$POSTGRES$+...) et lancer ``à la main'' le serveur. Pour cela, on utilisera
les commandes suivantes :

------------------------------------------------------------------------------
$ sudo -u postgres /Library/PostgreSQL8/bin/pg_ctl -D
  /Library/PostgreSQL8/data/ -l
  /Library/PostgreSQL8/log/PostgreSQL8.log start
------------------------------------------------------------------------------

En ce qui me concerne, le serveur est lancé au démarrage de la machine. Seul
le serveur MySQL est démarré manuellement.

Ensuite, on peut se connecter à la console +postgresql+ de la manière usuelle.

------------------------------------------------------------------------------
$ cd /Library/PostgreSQL8/bin/
$ ./psql test -U postgres
test=# \d;
               List of relations
 Schema |      Name      |   Type   |  Owner
--------+----------------+----------+----------
 public | foo            | table    | postgres
 public | foo_foo_id_seq | sequence | postgres
(2 rows)
------------------------------------------------------------------------------

Configuration de PostgreSQL
~~~~~~~~~~~~~~~~~~~~~~~~~~
Si l'on a choisit de lancer le serveur au démarrage de Mac OS X
(+/Library/StartupItems/PostgreSQL/PostgreSQL+), il n'est pas besoin de lancer
manuellement le serveur. On peut vérifier que le serveur est bien démarré dans
le *Moniteur d'activité*, ou en ligne de commande :

------------------------------------------------------------------------------
$ ps ax | grep postgres
  165  ??  S      0:00.41 /Library/PostgreSQL8/bin/postgres -D /Library/Postgre
  207  ??  Ss     0:00.40 postgres: writer process
  208  ??  Ss     0:00.28 postgres: wal writer process
  209  ??  Ss     0:00.08 postgres: autovacuum launcher process
  210  ??  Ss     0:00.15 postgres: stats collector process
  563  ??  Ss     0:00.01 postgres: postgres test ::1(49277) idle
  564  ??  Ss     0:03.62 postgres: postgres test ::1(49278) idle
  665  p2  R+     0:00.00 grep postgres
------------------------------------------------------------------------------

Si l'on a installé les gestionnaires clients, on peut également lancer
l'utilitaire *Service Manager* <<Fig. 1>>. Celui-ci est comparable à l'outil
pour lancer le serveur +mysql+ situé dans le panneau des *Préférences
Système* de Mac OS X : on clique sur le bouton pour démarrer...

[[Fig. 1]]
.Gestionnaire de connexion au serveur.
image::pgsql1.png[pgsql1.png]

Dans un premier temps, on crée une nouvelle base, que l'on appelera +test+ et
qui nous servira de base de test. Ensuite, on se connecte à la nouvelle table
ainsi crée et on ajoute deux entrées. On procède comme dans le
http://developer.apple.com/internet/opensource/postgres.html[tutoriel en
ligne] proposé par Apple.

------------------------------------------------------------------------------
[13] $ sudo -u postgres createdb test
[14] $ sudo -u postgres psql test
Welcome to psql 8.3.0, the PostgreSQL interactive terminal.

Type:  \copyright for distribution terms
       \h for help with SQL commands
       \? for help with psql commands
       \g or terminate with semicolon to execute query
       \q to quit

test=# create table tab1 (name varchar primary key, tab1_id serial);
NOTICE:  CREATE TABLE will create implicit sequence "tab1_tab1_id_seq" for serial column "tab1.tab1_id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "tab1_pkey" for table "tab1"
CREATE TABLE
test=# insert into tab1 (name) values ('Alice');
INSERT 0 1
test=# insert into tab1 (name) values ('John');
INSERT 0 1
test=# \q
------------------------------------------------------------------------------

On peut effectuer des requêtes en ligne de commande, ou à l'aide des
utilitaires graphiques. Par exemple, l'utilitaire *Query Tool for Postgres*
permet de visualiser les tables, les schémas, etc.

[[Fig. 2]]
.Création d'une requête.
image::pgsql2.png[pgsql2.png]

En sélectionnant la table créée (+tab1+) <<Fig. 2>>, on peut afficher la liste
des entrées (+SELECT * FROM tab1+) et on retrouve bien les deux entrées
insérées à l'étape précédente <<Fig. 3>>.

[[Fig. 3]]
.Affichage des résultats.
image::pgsql3_75pc.png[pgsql3.png]

Ensuite, on peut ajouter un groupe d'utilisateurs autorisés à se connecter sur
la table +test+. Ici, on ajoute l'utilisateur +chl+ avec le mot de passe
+lolita+. Cela servira pour les connexions distantes sur la base de
données.

------------------------------------------------------------------------------
test=# create group test;
CREATE ROLE
test=# create user chl with password 'lolita';
CREATE ROLE
test=# alter group test add user chl;
ALTER ROLE
test=# \q
------------------------------------------------------------------------------

On peut vérifier que l'utilisateur nouvellement créé est bien autorisé à se
connecter sur la table +test+.

------------------------------------------------------------------------------
$ psql test chl
Welcome to psql 8.3.0, the PostgreSQL interactive terminal.

Type:  \copyright for distribution terms
       \h for help with SQL commands
       \? for help with psql commands
       \g or terminate with semicolon to execute query
       \q to quit
test=> \dp
          Access privileges for database "test"
 Schema |       Name       |   Type   | Access privileges
--------+------------------+----------+-------------------
 public | tab1             | table    |
 public | tab1_tab1_id_seq | sequence |
(2 rows)
------------------------------------------------------------------------------

Le script Perl ci-dessous est entièrement copié du tutoriel proposé par
Apple. Globalement, il permet de se connecter à la table et d'afficher
l'ensemble des entrées qu'elle contient. Il est nécessaire d'installer
l'interface +DBI.pm+ (comme pour MySQL), soit par +fink+

------------------------------------------------------------------------------
$ sudo fink install dbi-pm
------------------------------------------------------------------------------

soit directement à partir de +CPAN+. Ensuite, on ajoute l'interface spécifique
à PostgreSQL, +DBD::Pg+, à partir de +CPAN+. Donc, autant faire les deux avec
l'utilitaire +cpan+.

------------------------------------------------------------------------------
$ sudo perl -MCPAN -e 'install DBI'
$ sudo perl -MCPAN -e 'install DBD::Pg'
------------------------------------------------------------------------------

Le programme +cgi+ de test doit être placé dans le répertoire hébergeant les
scripts CGI (sur un site distant, ou en local dans
+/Library/WebServer/CGI-Executables+), et il doit être exécutable (+$ chmod +x
pg.cgi+).

..............................................................................
include::pg.cgi[tabsize=4]
..............................................................................

Le résultat produit est conforme à ce qui est attendu <<Fig. 4>>.

[[Fig. 4]]
.Perl et PostgreSQL.
image::pgsql4.png[pgsql4.png]



SQLite
------

Du point de vue des http://www.sqlite.org/speed.html[performances], SQLite est
préférable lorsque l'on gère de petites bases de données, sans grosses
contraintes d'intégrité à mettre en place. Qui plus est, on peut accéder à des
données stockées sous SQLite depuis pratiquement n'importe quel langage de
programmation. Un http://www.sqlite.org/sqlite.html[tutoriel] permet de se
familiariser rapidement avec SQLite.

[TIP]
.SQLite et Apple Mail
==============================================================================
SQLite est installé par défaut sous Mac OS X (+sqlite3+). Le gestionnaire de
mail *Apple Mail* utilise en fait une base de données SQLite pour gérer les
messages. Comme cela est proposé sur le blog de
http://www.hawkwings.net/2007/03/01/a-faster-way-to-speed-up-mailapp/[Hawk
Wings], on peut ``accélérer'' l'affichage de *Apple Mail* (quelque peu ralenti
lorsque l'on gère beaucoup de messages) en reconstruisant l'index de la
table. Les commandes à utiliser sont assez simples :

------------------------------------------------------------------------------
$ cd ~/Library/Mail
$ sqlite3 Envelope\ Index
SQLite version 3.1.3
Enter ".help" for instructions
sqlite> vacuum subjects;
Ctrl-D
------------------------------------------------------------------------------

Personnellement, je conserve environ 2000 messages dans la boîte de récéeption
de *Apple Mail*, et j'archive régulièrement les messages (tous les deux mois)
dans des dossiers indexés chronologiquement, donc ce type de manipulation ne
change pas foncièrement la réactivité de *Apple Mail*.
==============================================================================

La création d'une base de données avec SQLite est beaucoup plus rapide qu'avec
MySQL ou PostgreSQL puisqu'il y a beaucoup moins de droits à configurer. If
faut donc plutôt voir SQLite comme un gestionnaire de fichier
``amélioré''. Par exemple, pour créer le même type de table qu'à la section
précédente, on procède ainsi :

------------------------------------------------------------------------------
$ sqlite3 test.db
SQLite version 3.1.3
Enter ".help" for instructions
sqlite> create table tab2(one varchar(10), two smallint);
sqlite> insert into tab2 values('Alice', 1);
sqlite> insert into tab2 values('John', 2);
sqlite> select * from tab2;
Alice|1
John|2
------------------------------------------------------------------------------

J'ai reproduit l'http://www.sqlite.org/quickstart.html[exemple tcl] fourni sur
le site, en adaptant le chemin de la bibliothèque (l. 6, +load
/usr/lib/tclsqlite3.so Sqlite3+) pour que cela corresponde à mon arborescence
Mac.

..............................................................................
include::query_tab2.sh[tabsize=4]
..............................................................................

L'appel à ce petit programme produit le résultat escompté :

------------------------------------------------------------------------------
$ ./query_tab2.sh test.db "select * from tab2;"
one = Alice
two = 1

one = John
two = 2
------------------------------------------------------------------------------


Pour utiliser SQLite avec Ruby, il est nécessaire d'installer l'extension
correspondante. On peut utiliser +gem+ pour cela.

------------------------------------------------------------------------------
$ sudo gem install sqlite3-ruby
Password:
Need to update 16 gems from http://gems.rubyforge.org
................
complete
Select which gem to install for your platform (i686-darwin)
 1. sqlite3-ruby 1.2.1 (mswin32)
 2. sqlite3-ruby 1.2.1 (ruby)
 3. sqlite3-ruby 1.2.0 (mswin32)
 4. sqlite3-ruby 1.2.0 (ruby)
 5. Skip this gem
 6. Cancel installation
> 2
Building native extensions.  This could take a while...
Successfully installed sqlite3-ruby-1.2.1
Installing ri documentation for sqlite3-ruby-1.2.1...
Installing RDoc documentation for sqlite3-ruby-1.2.1...
------------------------------------------------------------------------------

Il existe une http://sqlite-ruby.rubyforge.org/sqlite3/faq.html[FAQ] pour les
principales questions relatives à l'interface Ruby/SQLite.

En ligne de commande, voici comment on peut procéder :

------------------------------------------------------------------------------
$ irb
irb(main):001:0> require 'sqlite3'
=> true
irb(main):002:0> db = SQLite3::Database.open( "test.db" )
=> #<SQLite3::Database:0x10249cc @driver=#<SQLite3::Driver::Native::Driver:0x101b73c @callback_data={}, @trace={}, @busy_handler={}, @authorizer={}>, @statement_factory=SQLite3::Statement, @results_as_hash=false, @handle=#<SWIG::TYPE_p_sqlite3:0x101b6b0>, @transaction_active=false, @closed=false, @translator=nil, @type_translation=false>
irb(main):003:0> db.execute( "SELECT * FROM tab2" ) do |row|
irb(main):004:1* puts row
irb(main):005:1> end
Alice
1
John
2
=> nil
------------------------------------------------------------------------------

Voici également un petit script qui permet de récupérer les informations
contenues dans la table +tab2+ créée ci-dessus.

..............................................................................
include::sqlite_test.rb[tabsize=4]
..............................................................................

** [2008-03-21 Ven] Paired comparisons

Sylvia G. Roch, Angela M. Sternburgh, Pat M. Caputo (2007) Absolute vs Relative Performance Rating Formats: Implications for fairness and organizational justice
International Journal of Selection and Assessment 15 (3) , 302–316 doi:10.1111/j.1468-2389.2007.00390.x

James Monroe Stewart1 and Carol Barach1
A brief memory strategy with distinctive features
Revue	Journal of Psycholinguistic Research
Éditeur	Springer Netherlands
ISSN	0090-6905 (Print) 1573-6555 (Online)
Numéro	Volume 9, Number 4 / juillet 1980
DOI	10.1007/BF01067451
Pages	391-406

A Bayesian paired comparison approach for relative accident probability assessment with covariate information

P. Szweda, b, , J. Rene van Dorpb, , , J.R.W. Merrickc, , T.A. Mazzuchib,  and A. Singhb,
European Journal of Operational Research
Volume 169, Issue 1, 16 February 2006, Pages 157-177

D. Amnon Silverstein
Hewlett Packard Laboratories, 1501 Page Mill Road, Palo Alto, California 94304
Joyce E. Farrell
Efficient method for paired comparison
Journal of Electronic Imaging -- April 2001 -- Volume 10, Issue 2, pp. 394-398

Gordon Crawford, Cindy Williams, 1985
The Analysis of Subjective Judgment Matrices
RAND Report

** [2008-05-12 Lun] Knowledge engineering
*http://www.springer.com/west/home?SGWID=4-102-22-165247224-0&changeHeader=true&SHORTCUT=www.springer.com/978-1-84628-475-5[An
 introduction to knowledge engineering], Simon Kendal & Malcom Creen,
 Springer 2005.*

This book provides a gentle introduction to knowledge engineering
which encompasses the acquisition, representation and management of
so-called "knowledge". After reviewing the basic tools for managing
knowledge-based systems, namely Expert Systems, Neural Networks,
Case-Based Reasoning, Genetic Algorithms, Intelligent Agents and Data
Mining, the authors develop useful concepts relating to knowledge
acquisition and representation. Then, dedicated programming languages
are reviewed, including expert systems shells and PROLOG, before
tackling the design of common knowledge-based systems (architecture,
life cycle and the like). Finally, the rest of the book is devoted to
uncertain reasoning and hybrid knowledge-based systems, with a
particular emphasis on probabilistic reasoning, fuzzy logic, and the
integration of symbolic and connectionist systems.

*****************************************************************************
This article is referenced from the
http://www.aliquote.org/memos/2008/01/04/an-introduction-to-knowledge-engineering/index.php#links[following
post] on http://www.aliquote.org[www.aliquote.org], and is also
available in link:./KnowledgeEnginneering.pdf[pdf format].
*****************************************************************************

Summary
-------
Although this book should be viewed as an elementary book on such an
extensive field as Knowledge-Based Systems (KBS), I shall use it as
the basis for illustrating some of the classical tools tuned to
Artificial Intelligence (AI) programming. The open-source statistical
package http://www.cran.r-project.org[R] will be used in the following
applications.

Other reference textbooks related to AI and KBS include, but is not
limited to:

- _Artificial Intelligence: A Modern Approach_, by Stuart Russel and
Peter Norvig (1995, Prentice Hall)
http://aima.cs.berkeley.edu/[homepage of the 2nd version]
- _Knowledge Systems Design_, by J. K. Debenham (1988, Prentice Hall)

Some additional pointers can be found on the free on-line encyclopedia
http://en.wikipedia.org/wiki/Knowledge-based_systems[Wikipedia].

We will mainly focus our attention on Neural Networks, Genetic
Algorithms and Data Mining. These computational frameworks will be
used as our starting point for further discussion.


Neural networks
---------------
Before going down to the statistical properties of the NN approach, in
particular its link to the more usual regression approach, let's
remind the reader some of the main properties of an artificial NN.
A classical textbook on this subject  is <<Ripley1996>>.


Principles of neural modeling
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

It can be shown that a two-layer feedforward neural network can
implement any Boolean function. Figure 1 illustrate how a two-layer
network can solve the XOR problem (reproduced from <<Berthold2003>>,
p. 279).

.A two-layer network that can solve the XOR problem
[caption="Figure 2 : "]
image::img/nn_xor.png[nn_xor.png]

You may recall that the XOR problem, i.e. the exclusive-OR function
whose truth table is given below, usually cannot be resolved by the
basic artificial neuron proposed by <<McCulloch1943>>.

.The XOR function
[grid="all"]
.-----.-----.----
x~1~   x~2~   y
-----------------
0       0     0
0       1     1
1       0     1
1       1     0
----------------

Some applications
~~~~~~~~~~~~~~~~~
The R package `nnet` (now bundled in the `VR` package) allows to fit a
single-hidden-layer neural network to a data matrix.
To illustrate how such NN can uncover the properties of a dataset, we
will use the well-known Fisher Iris data (Fisher, 1936). These data
are measurements of the sepal length and width and petal length and
width in centimetres of fifty plants for each of three types of iris;
Iris setosa, Iris versicolor and Iris virginica. They most often are
used to illustrate the principles underlying discriminant
analysis. Indeed, though the data were collected by Dr. Edgar
Anderson, R. A. Fisher published the data on Iris setosa and Iris
versicolor to demonstrate the use of discriminant functions. The Iris
virginica data are used to extend Fisher's technique and to test
Randolph's (1934) hypothesis that Iris versicolor is a polyploid
hybrid of the two other species which is related to the fact that Iris
setosa is a diploid species with 38 chromosomes, Iris virginica a
tetraploid and Iris versicolor having 108 chromosomes is a hexaploid.
Here is what it looks like:

-----------------------------------------------------------------------------
> data(iris)
> pairs(iris)
-----------------------------------------------------------------------------

.The Fisher's iris
[caption="Figure 1 : "]
image::img/iris.png[iris.png]


The program link:./code/nn_ex1.java[nn_ex1.java] implements a basic
hopfield neural network.

Knowledge representation and management
---------------------------------------

Rule-based systems
~~~~~~~~~~~~~~~~~~
Representing knowledge through a KBS can be handled using two kind of
programming approach: Procedural and Declarative. Procedural
programming refers to a set of procedures, or fixed instructions, that
have to be performed in a specific order, while declarative programing
mainly involves a set of rules (statements about given facts) for
which the processing sequences are not defined by the engineer. In
short, the statements provide information regarding the association
between several objects, or entities, and the system decides, through
its inference engine, when to apply selected rules.

Among others, forward and backward chaining (also see
http://www.cse.unsw.edu.au/~billw/aidict.html[The AI Dictionary]) are
generally found in any rule-based system. Such a system uses the
basics of propositional logic to manipulate data which in turn is
stored in the system through symbols or entities related one to to
each other. Relationships between entites and values are mostly
represented using classical symbols, such as AND, OR, NOT, IMPLIES,
FOR ALL, EXIST, etc.

In _forward chaining_, the inferential procedure starts with a set of
facts (i.e. logical assertions of the form IF fact1 THEN fact2) and
processes them to reach conclusions about the domain of
expertise. Forward chaining rules are fired for each new data that is
presented to the system until it cannot reach any further conclusion.

On the contrary, in _backward chaining_, the system is initialized
with a given hypothesis, and, then, the veracity of this hypothesis is
proved by checking the rules within the domain. In other words, the
system is driven from the goal to the data while the reverse holds in
the preceding case.

Quoting the http://www.computer-dictionary-online.org/[Online Computer
Dictionnary]:

[backward chaining, (1997-07-14)]
_____________________________________________________________________________
An algorithm for proving a goal by recursively braking it down into
sub-goals and trying to prove these until facts are reached. Facts are
goals with no sub-goals which are therefore always true. Backward
training is the program execution mechanism used by most logic
programming language like Prolog.

Opposite: forward chaining.
_____________________________________________________________________________


One can find an implementation in Java of such rule-based programming
on the http://algernon-j.sourceforge.net/[Algernon's project]
webpage. There is also a complete implementation of an
http://www.amzi.com/ExpertSystemsInProlog/[expert system in
PROLOG]. Note that among Algernon code samples, there is a Mycin-like
reasoning sheme example. Mycin <<Buchanan1984>> is a well-known
example of the use of Expert System in the biomedical domain, and it
was mainly used for training the becoming physician (other links:
http://www.computing.surrey.ac.uk/ai/PROFILE/mycin.html[1],
http://en.wikipedia.org/wiki/Mycin[2]).

// TODO
// http://www.cert.fr/dcsd/THESES/fabiani/manuscrit_fabiani/node334.html

The following example is taken from the
http://algernon-j.sourceforge.net/doc/examples/mini-Mycin/[Algernon
example]. It shows how one of the decision rules is intanciated using
this KBS:

-----------------------------------------------------------------------------
;; Rule 4  "A patient who has renal_abnormality has abnormal_urologic_anatomy"
(tell ((:add-rule Assertion
           ;; test slots of the modified or new Assertion
           ((concept ?assertion "renal_abnormality")
            (value   ?assertion :TRUE)
            ->
            (:add-instance (?assertion Assertion ) ;; Add a new assertion
                (concept ?assertion "abnormal_urologic_anatomy")
                (value   ?assertion :TRUE))
            ))
        ))
-----------------------------------------------------------------------------

The following articles, related to various scientifical fields, should
be of relevant interest:

=============================================================================
- S. S. Joshi and B. Guilhabert, Sequence-Learning Algorithm Based on Backward Chaining, *Adaptive Behavior*, *14(1)*: 53-71 (2006) [http://adb.sagepub.com/cgi/content/abstract/14/1/53[abstract]]
- R. Poli and W. B. Langdon, Backward-chaining evolutionary algorithms, *Artificial Intelligence*, *170*: 953-982 (2006) [http://www.cs.ucl.ac.uk/staff/W.Langdon/ftp/papers/poli_2006_AIJ.pdf[pdf paper]]
- T. Mszros and B. Vadsz, An Extension to the RETE Match Algorithm: Supporting both Forward and Backward Chaining, *TEMPUS JEP3815*, Budapest, Hungary (1994) [http://citeseer.ist.psu.edu/rd/13818962%2C270955%2C1%2C0.25%2CDownload/http://citeseer.ist.psu.edu/cache/papers/cs/13804/http:zSzzSzwww.mit.bme.huzSz%7EmeszaroszSzmezSzpubszSztempus94.pdf/an-extension-to-the.pdf[pdf paper]]
- D. H. Fisher, M. E. Edgerton, Z. Chen, L. Tang, and L. Frey, Backward Chaining Rule Induction [http://www.vuse.vanderbilt.edu/~dfisher/IDAfinalsubmission.pdf[pdf paper]]
- L. Aversano, G. Canfora, and A. Clampi, An Algorithm for Web Service Discovery through Their Composition, *IEEE International Conference on Web Services (ICWS'04)*: 332 [http://csdl2.computer.org/persagen/DLAbsToc.jsp?resourcePath=/dl/proceedings/&toc=comp/proceedings/icws/2004/2167/00/2167toc.xml&DOI=10.1109/ICWS.2004.1314755[abstract]]
- R. Poli and W. B. Langdon, Backward-chaining Genetic Programming, *GECCO'05*, June 25-29 (2005) [http://cswww.essex.ac.uk/staff/poli/papers/geccobackchain2005.pdf[pdf paper]]
=============================================================================

// TODO:
// http://ai-depot.com/Tutorial/RuleBased-Methods.html
//

Semantic networks and frames
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Both methodologies-- semantic network and frames--can be thought as
the precursors of the actual high-level programming languages, such as
C++ or Java, which are fundamentally object-oriented languages.

Semantic networks are mostly a convenient way to graphically represent
associations between entities in the knowledge domain. In fact,
associations allow to describe the hierarchical relations between all
of the entities. Such a graphical network is illustrated in the
following figure (reproduced from Kendal & Creen, p. 143).

.A small semantic network
[caption="Figure 2 : "]
image::img/sn1.png[sn1.png]

Relations, in particular inheritance relationship, can be represented
using a simple oriented graph whose node contains the entities and
link represent the relation between two entities.

However, as shown in Figure 3 (Kendal & Creen, p. 144), adding a
single property to the network can drastically reduce the power of the
inference that can be made about the domain. Indeed, after setting
that _grass snake eats meat_, we now arrive at differing conclusions
depending on when we start to read the graph.

.The same semantic network after a slight modification
[caption="Figure 3 : "]
image::img/sn2.png[sn2.png]

For the interested reader, some links are given below:

=============================================================================
- http://www.semanticresearch.com/[Semantic Research] (includes the Semantica (R) software and some white papers available as pdf, like http://www.semanticresearch.com/downloads/whitepapers/theory_whitepaper.pdf[Knowledge and Semantic Network Theory])
- http://www.ipli.com/semantic.htm[Semantic Networks, Concept Maps, Knowledge, Knowledge Representation]
- http://www.sciam.com/article.cfm?articleID=00048144-10D2-1C70-84A9809EC588EF21[The Semantic Web] (from *Scientific American*)
- http://www.conroeisd.net/departments/tlc/plan/mindtools.htm[Mindtools for Cognitive Thinking]
- M. Hsing and A. Cherkasov, Integration of Biological Data with Semantic Networks, *Current Bioinformatics*, *1(3)* (2006) [http://colab.cim3.net/file/work/SICoP/2006-10-10/Hsing_CBIO.pdf[pdf paper]]
- S. J. McGriff, Measuring cognitive structure: An overview of Pathfinder Networks and Semantic Networks (2001) [http://www.personal.psu.edu/sjm256/portfolio/kbase/Theories&Models/Cognitivism/Cognitive-Structure.pdf[pdf paper]]
- M. Marko, M. A. Porter, A. Probst, C. Gershenson, and A. Das, Transforming the World Wide Web into a Complexity-Based Semantic Network (2002) [http://arxiv.org/html/cs.NI/0205080[html paper]]
=============================================================================

// TODO
// http://www.coe.missouri.edu/~jonassen/courses/mindtool/SemanticSoftware.html


Frames technology offer a way to circumvent some of the limitations of
the semantic network approach. More precisely, frames allow


.Example of a set of frames
[caption="Figure 4 : "]
image::img/fr.png[fr.png]

Dedicated programming language
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Lisp and PROLOG are certainly the most promoted programming languages
for AI applications. They were created in the 1958 and 1972 and differ
from procedural language in that they allow the programmer to use
declarative assertion rather than inputting a raw sequence of
instructions.


Bibliography
------------

+ [[[Berthold2003]]] Berthold, M. and Hand, D. J. (2003). _Intelligent Data Analysis. An Introduction_. Springer.
+ [[[Ripley1996]]] Ripley, B. D. (1996) _Pattern Recognition and Neural Networks_. Cambridge.
+ [[[Buchanan1984]]] Buchanan, B. G. and Shortliffe, E. H. (1984). _Rule-Based Expert Systems, The Mycin experiments of the Stanford Heuristic Programming Project_. Addison-Wesley Publishing Company. [available online at http://www.aaaipress.org/Classic/Buchanan/buchanan.html[www.aaaipress.org]]
+ [[[McCulloch1943]]] McCulloch, W. S. and Pitts, W. (1943). A logical calculus of the ideas immanent in nervous activity. _Bulletin of Mathematical Biophysics_, _5_, 115-133.
+ [[[Kabbaj1991]]] Kabbaj, A. (1991). _Intelligence Artificielle en Lisp et Prolog_. Masson.

** [2008-10-06 Lun] Graphes et algorithmes
Vocabulaire et notions essentielles
-----------------------------------

Un graphe est un couple G=(X,U) formé d'un ensemble X et d'une relation
bianire U sur X. Les éléments de X sont appelés les sommets de G, et ceux de U
les arcs de G. Si l'on considère que x est l'origine de (x,y) ∈ U et y son
extrêmité, alors l'arc (x,y) est dit incident en x et en y. Deux arcs sont
dits adjacents lorsqu'ils ont au moins un sommet en commun.

Un peu de "topologie" sur cette grande famille :

- G_Y = (Y,U∩(Y×Y)) est le sous-graphe de G induit par Y,
- G^V = (X,V) est le graphe partiel de G induit par V,
- G_Y^V = (Y,V∩(Y×Y)) est le sous-graphe partiel de G induit par Y et V.

On peut également définir l'homomorphisme de G vers G' comme la fonction f:
X→X' qui à (x,y) ∈ U associe (f(x),f(y)) ∈ U'. Si l'homomorphisme f est en
plus bijectif, et que f^{-1} est un homomorphisme également, alors f est un
isomorphisme : G et G' sont dits isomorphes.

Enfin, pour en terminer avec cette introduction rigoureuse aux propriétés des
graphes, le nombre n des sommets de G est appelé son ordre et le nombre m de
ses arcs est appelé sa taille.

Pour mieux définir un graphe G donné, on peut convenir de désigner par
∂+(x)=⎮xU⎮ le degré sortant de x, où xU l'ensemble des arcs d'origine x et
(x,y) ∈ xU désigne un arc sortant. On définit de même ∂-(x)=⎮xU⎮ le degré
entrant de x. L'opérateur ⎮.⎮ désigne la somme des éléments de l'ensemble
considéré.

Le premier résultat trivial est que la somme des degrés entrants est égale à
la somme des degrés sortants :

 ∑ ∂+(x) =  ∑ ∂-(x) = ⎮U⎮
x∈X        x∈X

Dans l'exemple suivant, on a ∂+(2)=2 (2U={(2,4),(2,5)}) et ∂-(2)=1
(U2={(1,2)}).

// ::1.dot::
// digraph 1 {
//   size="5,5";
//   1 -> 2;
//   1 -> 3;
//   2 -> 4;
//   2 -> 5;
//   3 -> 4;
//   3 -> 5;
//   4 -> 6;
//   5 -> 6;
// }

image::1.png[]

À présent que les éléments constitutifs d'un graphe ont été définis, on peut
s'intéresser à leur relation lorsqu'ils sont pris dans leur ensemble ou après
une restriction définie.

Un chemin de G se définit comme une suite c=(u_1,...,u_q) d'arcs deux à deux
distincts telle que l'extrêmité de tout u_i, 0 < i ≤ q-1, correspond à
l'origine de u_{i+1}. En d'autres termes, on peut "dessiner" le chemin sans
lever le crayon. Si l'on désigne un chemin c par la suite x_1...x_{q+1}, q est
appelé sa longueur.


Un exemple de graphe avec 4 sommets et 4 arcs est fourni ci-dessous :

      A
      *
     /|
    / |
 B *--|--* D
    \ | /
     \|/
      *
      C



Algorithmes sur les graphes
---------------------------




Structures de données
~~~~~~~~~~~~~~~~~~~~~
Avant de présenter quelques algorithmes reposant des représentations sous
forme de graphes, il est utile d'introduire les structures de données
associées à ce type de représnetation. En fait, on parle de type de données
abstraits.

** [2009-07-14 Mar] DSC 2009 conference
There was a lot of interesting stuff presented this year at the DSC conference. But first of all, let's look at some pictures of Copenhagen, which has very nice lakes and parks.

Contrary to the annual UseR! conference (which I attended too), the DSC conference targets a much smaller audience and it is (supposed to be) more oriented toward R development and new programming methodology. Also, other languages may be presented, and this was the case of Common Lisp.

There were two or three talks that turned around S3/S4 classes. Briefly, S4 class is the new interface to R objects, starting from R 2.8.

It should be noted that from a programming perspective, R objects are mutable and functions are generic methods, as H. Wickham remained in his talk. A nice overview of programming language is provided in Programming paradigms for Dummies: What every programmer should know, available on Peter Van Roy website. Also, John M. Chambers discussed the way S3 and S4 classes may be used in a safer manner. A longer article is available on his website: Developments in Class Inheritance and Method Selection (http://stat.stanford.edu/~jmc4/classInheritance.pdf).

As stated in the on-line help for "methods" in the "base" package, what are called methods are simply generic function, which may not be visible to the user. Most of the time, we can access the R code using a call to =getAnywhere()=.

=> methods(summary)= returns all S3 (and possibly S4) methods. From the help system, we have:

#+BEGIN_QUOTE
     This scheme is called _S3_ (S version 3).  For new projects, it is
     recommended to use the more flexible and robust _S4_ scheme
     provided in the 'methods' package.  Functions can have both S3 and
     S4 methods, and function 'showMethods' will list the S4 methods
     (possibly none).
#+END_QUOTE

The S4 scheme tries to circumvent some of the cons of the S3 scheme, and all related stuff is located in the "Methods" package.

An instance of a user-or system-defined class is created using the new() operator, much like in Java. For instance, suppose we define the following class:

#+BEGIN_SRC R
setClass("Complex", representation(real="numeric",image="numeric"))
#+END_SRC

We decide to repesent complex numbers by a couple of real values. In S4 terminology, it has two slots.

The usual arithmetic operators are now members of an S4 class ('Arith') and methods can be developed for them. Let's look what it gives with our 'Complex' class.

Christophe Genolini offers a gentle introduction to R programming with S4 and relevant OO concepts.

** [2009-08-01 Sam] Fibonacci
#+BEGIN_SRC python
def fib1 (n):
    """ Compute the value of F(n) in exponential time (recursive) """
    if (n == 0):
        return 0
    if (n == 1):
        return 1
    return fib1(n-1) + fib1(n-2)

from numarray import array,zeros

def fib2 (n):
    """ Compute the value of F(n) in polynomial time (iterative) """
    if (n == 0):
        return 0
    f = zeros((n))
    f[0],f[1] = 0,1
    for i in range(2,n):
        f[i] = f[i-1]+f[i-2]
    return f[n]

def fib3 (n):
    """ Compute the value of F(n) in a more efficeint way (matrix) """
    X = array([[0,1],[1,1]])
    X ** n
#+END_SRC

** [2009-11-25 Mer] Apple developement tools
Snow Leopard (SL) comes with two versions of gcc (4.0 and 4.2) once
you've installed the Xcode package. It is, however, possible to
compile the latest gcc version (4.5) as shown by J. De Leeuw and
others. See the SVN repository at http://gcc.gnu.org/svn.html.
In this case, the complete gcc suite (http://gcc.gnu.org/)
would provide front ends for C, C++, Objective-C, Fortran, Java, and
Ada. Actually, I was not able to succeed in using the gcj compiler
because of missing dependencies, in particular the Eclipse native
compiler (ecj). The gfortran compiler works fine, but I also have a
version of Fortran 77, mostly to ensure compatibility with old
software and to compare both versions.

In addition, the Developer tools include the llvm suite
(http://llvm.org/) which is based on version 4.2 of gcc. LLVM stands
for Low Level Virtual Machine and it is ...

Apple provides Python 2.3 (for compatibility reason), 2.5 (32 bits
mode), and 2.6 (32 and 64 bits mode). They all are installed as system
languages, that is in a Framework. Default system Python can be
changed by setting in .profile or .bashrc something like:
  export VERSIONER_PYTHON_PREFER_32_BIT=no
  export VERSIONER_PYTHON_VERSION=2.6
but see the man page on python. There is also an alternative solution
which is Enthought Python (http://www.enthought.com/), that comes with
a lot of scientific packages bundled together. It should be sufficient
for most numerical applications although it may be necessary to add
additional package. The proper way to do is to patch the easy_install
utility and use it under EPD; the sad way (but it works!) is to
compile the package under Python 2.5 (which is actually the same
version that comes with EPD) and move the compiled package into the
EPD site-packages directory. Personally, I recompile everything
in 64 bits, with the exception of MayaVi. However, I may still be able
to use the EPD distribution through emacs with the enhanced Python
mode and ipython. Add to your .emacs something like:
  (setq ipython-command
     "/Library/Frameworks/Python.framework/Versions/Current/bin/ipython")
  (require 'ipython)
  (require 'python-mode)
Be careful that compiling from scratch the scipy package takes some
time (about 40 min.) when linked against LAPACK and/or BLAS (numpy is
laready included in system Python 2.5 and 2.6).

Ruby is available (version 1.8) but it is easy to update to version
1.9 in 64 bits, or to install MacRuby (http://www.macruby.org/) if one
is interested in benefiting from Apple Objective-C technologies. Both
can be installed in /usr/local. Ruby packages are easily managed using
gem (like cpan for Perl). In particular, Rails
(http://rubyonrails.org/) can be installed with one line: gem install
rails, but it is available as a standalone package if needed.

The R statistical software can be installed from CRAN website
(http://www.cran.r-project.org) with the binary installer, which
includes the R core packages, the Mac GUI and gfortran. Most
experienced users would be interested in the Mac OS X Developer's R
version (http://r.research.att.com/). Actually, I recompile the
experimental R 2.11, without GUI support, but I cannot get a working
Gtk system (most probably due to conflict with Cairo libraries).



Creating shared libraries using gcc

For example, there is no getline function in the standard C files on
Mac OS X. Although it could be replaced with fgets (less secure) or
fgetln which is defined in all BSD distributions. Suppose we are
interested in using getline


First you need to create the object file
  $ cc -fno-common -c getline.c
  $ file getline.o
  getline.o: Mach-O 64-bit object x86_64

Next, we can create the corresponding shared library:
  $ gcc -dynamiclib -o libgetline.dylib -dylib getline.o
  $ file libgetline.dylib
  libgetline.dylib: Mach-O 64-bit dynamically linked shared library x86_64

We can now compile our toy example using something like,
  $ cc -o mygetline mygetline.c -L/Users/chl/tmp -lgetline

where mygetline.c reads

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

int main(void)
{
  char * line = NULL;
  size_t len = 0;
  ssize_t read;
  while ((read = getline(&line, &len, stdin)) != -1) {
    printf("Retrieved line of length %zu: \n", read);
    printf("%s", line);
  }
  if (line)
    free(line);
  return EXIT_SUCCESS;
}

  $ ./mygetline
  first line here
  Retrieved line of length 16:
  first line here
  and a second one
  Retrieved line of length 17:
  and a second one

If you're planning to use this library for other application, don't
forget to put it in a place where it can be found, e.g. /usr/local/lib
or update your Libraries table.

** [2010-02-03 Mer] Gene annotations
En sqlite,

$ sqlite3 hg18.refseq.sqlite
sqlite> .tables
chromosome        exon_tree_parent  gene_tree         transcript
exon              exon_tree_rowid   gene_tree_node
exon_tree         gene              gene_tree_parent
exon_tree_node    gene_alias        gene_tree_rowid
sqlite> .schema gene
CREATE TABLE gene(
  id INTEGER PRIMARY KEY, -- ID to link with the RTree Index
  name VARCHAR,           -- Gene symbol (unless ensembl => ENSGID)
  chromosome_id INTEGER,  -- Fkey to chromosome.id
  strand INTEGER          -- 1 : plus, 2 : minus
);
CREATE INDEX geneChromosome on gene(chromosome_id);
CREATE UNIQUE INDEX geneName on gene(name);
CREATE INDEX geneStrand on gene(strand);
sqlite>  select * from gene where name='DRD1';
6107|DRD1|5|2
sqlite> select id from gene where name='DRD1';
6107
sqlite> select * from transcript where gene_id='6107';
NM_000794|6107|174800281|174803769|174801368|174802708|2


En python,

import sqlite3
conn = sqlite3.connect('hg18.refseq.sqlite')
c = conn.cursor()
c.execute('select * from gene where name="DRD1"')
for row in c:
   ....:     print row
   ....:
(6107, u'DRD1', 5, 2)

** [2010-05-24 Lun] Borsboom
(...) So, once again we see that the fundamental tension that Lord and
Novick have introduced through their axiomatic treatment of test
theory is constructed in such a way that it always works, but at the
price of losing the natural interpretation of true scores and random
error, as reflecting a stable characteristic and unsystematic
variation respectively, is philosophically untenable. A
philosophically acceptable interpretation of these concepts, as
products of the imagination which refer to recurrent dispositions in a
counterfactual state of affairs, is psychologically unattractive.
Classical test theory systematically falls between these two stools.

It is my understanding that few, if any, researchers in psychology
conceive of psychological constructs in a way that would justify the
use of classical test theory as an appropriate measurement model. Why,
then, is the classical test theory model so immensely successful?

D. Borsboom, Measuring the Mind, Conceptual Issues in Contemporary
Psychometrics, Cambridge University Press, 2005, pp. 46–47.

** [2010-12-27 Lun] HDP
This note is about Dirichlet Processes (DP) and their application in IRT. This was partly initiated following a question on stats.stackexchange.com that reminded me of the potential interest of DP in psychometrics. But first of all, what are DP?

The basic setup is as follows:
We consider problems involving groups of data, where each observation within a group is a draw from a mixture model, and where it is desirable to share mixture components between groups. We assume that the number of mixture components is unknown a priori and is to be inferred from the data. In this setting it is natural to consider sets of Dirichlet processes, one for each group, where the well-known clustering property of the Dirichlet process provides a nonparametric prior for the number of mixture components within each group.

In fact, it comes from a paper by Teh et al., [1] but I found a very clear introduction to topics such as DP, bayesian modeling, etc. in Non-parametric Bayesian Methods, from Zoubin Ghahramani. [2]

The definitive reference seems to be:
N. Hjort, C. Holmes, P. Müller, and S. Walker, editors. Bayesian Nonparametrics. Number 28 in Cambridge Series in Statistical and Probabilistic Mathematics. Cambridge University Press, 2010.

The recommended R package seems to be the DPpackage.

Bayesian Hierarchical Clustering, as implemented in the Bioconductor BHC package (http://www.bioconductor.org/help/bioc-views/release/bioc/html/BHC.html), offers an interesting way to do cluster analysis without bothering with an apriori number of clusters. I just ran the example in the package (the vignette is actually very limited) and found a good paper by Savage and coll. [3]

[1]  Teh, YW, Jordan, MI, Beal, MJ, and Blei, DM. Hierarchical Dirichlet Processes. November, 2005.
[2]  Ghahramani, Z. Non-parametric Bayesian Methods. Uncertainty in Artificial Intelligence Tutorial July 2005. http://learning.eng.cam.ac.uk/zoubin/talks/uai05tutorial-b.pdf (accessed December, 2010)
[3]  Savage, RS, Heller, K, Xu, Y, Ghahramani, Z, Truman, WM, Grant, M, Denby, KJ, and Wild, DL. R/BHC: fast Bayesian hierarchical clustering for microarray data. BMC Bioinformatics 2009, 10:242. doi:10.1186/1471-2105-10-242

** [2011-01-03 Lun] Genetics
Here are some notes I took while reading Lange's Mathematical and
Statistical Methods for Genetic Analysis (Springer, 2002, 2nd
ed.). There must be various topics covered there as I need to get a
clear idea of terminology used when speaking of genetic analysis, and
from what I know there are several models of population genetics. I
will also try to cover some concepts coming from behavioral
genetics. The use of dedicated software, like R/Bioconductor or Mx,
shall be dealt with in another file.

Other books I have read that are more or less relevant are:

  - Genes, Behavior, and the Social Environment: Moving Beyond the
     Nature/Nurture Debate
  - Kernel Methods in Computational Biology, Scholkopf et
     al. (Bradford, 2004)
  - Multiple Testing Procedures and Applications to Genomics, Dudoit
     and Van Der Laan (Springer, 2008)
  - Statistical Genetics: Gene Mapping Through Linkage and
     Association, Neale et al. (Taylor & Francis, 2007)
  - Genetic Analysis of Complex Disease, Haines and Pericak-Vance
     (Wiley, 2006, 2nd ed.)
  - Bioconductor Case Studies, Hahne et al. (Springer, 2008)
  - Statistical Methods in Genetic Epidemiology, Thomas (Oxford
     University Press, 2004)

In 2004, a Special Issue was published in the Lancet featuring 7
articles dealing with genetic epidemiology. They are available at the
following address: http://j.mp/hZwQEe. I still think they could serve
as a very good starting point for a couple of reference papers.

*Terminology*

Genes occur at definite sites, called loci, along a chromosom. Each
locus can be occupied by one of several variant genes, called
alleles. Most human cells contain 22 homologous pairs of chromosomes
(autosomes) and two sex chromosomes -- two paired X's for a female,
and X+Y for a male, making up a total of 46 chromosomes. Except for
the sex chromosome, there are two genes at every locus, and if the two
alleles are identical we say the person is homozygote; in the other
case, he is said to be heterozygote. Genotype is not observable, but
phenotype is.


  |   |
  A - A
  |   |
  B - A
  |   |
  A - B
  |   |
  B - B
  |   |

** [2012-01-08 Dim] Frank Harrell
I'd suggest fitting a model that has the right number of parameters
for the effective sample size (allowing multiple terms for apriori
strong variables not known to act linearly), putting in
subject-matter-driven interaction terms, then plotting predicted
values from that model. Partial effect plots are very helpful.

Some recommendations for assessment of model fit. (1) Make the model
fit up-front as much as possible so you don't need to worry so much
(e.g., don't assume anything is linear; use regression splines); (2)
If you have some hope that the model is simple, add more complex terms
to the model and assess their added value (e.g., partial chi-square
chunk test); (3) Draw a bootstrap overfitting-corrected smooth
calibration curve; (4) Summarize predictive discrimination (show
histogram of predicted risks or compute R2 measure or Somers' Dxy rank
correlation (related to c-index or ROC area).

** [2013-06-25 Mar] Mplus
Here are some notes I took when learning Mplus for psychometrics.
This is not a replacement for the Mplus User Guide
In what follows, I will use the following conventions: keywords are
displayed in UPPERCASE,


difference with `gllamm`:
- http://www.gllamm.org/SEMcat.pdf
- [Mplus & GLLAMM](http://bit.ly/11OzEPN)
- http://www.stata.com/statalist/archive/2004-05/msg00000.html
- http://www.ncbi.nlm.nih.gov/pmc/articles/PMC2717116/

*Exploratory factor analysis*

Here is a sample script that performs EFA on ordered (Likert-type) responses:

    TITLE:	  Put your title here.
    DATA:	  FILE IS file.dat;
    VARIABLE: NAMES ARE ID-Q10;
    	      CATEGORICAL ARE Q1-Q10;
    ANALYSIS: TYPE = EFA 1 5;
              ROTATION = VARIMAX;

The `CATEGORICAL` instruction is here to ensure that Mplus will treat data
as categorical data (either binary or polytomous items) in which case Mplus
uses robust weighted least squares estimator (WLS). In the `ANALYSIS` step,
we indicate what kind of analysis we want to perform, in this case `EFA`,
and further options. After `TYPE = EFA` we specify the number of factors to
extract (minimum to maximum). The default rotation is `GEOMIN` which can be
thought of as a way to minimize variable complexity, that is favor simple
structure, according to Sass & Schmitt (2010).

To get the covariance matrix, we just have to replace `TYPE = EFA` by `TYPE
= BASIC`. If we want to save it for latter use, we need to specify

    OUTPUT:
      SAMPSTAT;
    SAVEDATA:
      SAMPLE = covmat.dat;

This may be useful for large dataset (computing a polychoric correlation
matrix is nonetheless costly) or repeated tasks. Also, if you want to want
to run a factor analysis with another software, you can directly reuse a
correlation matrix computed under Mplus. Of note, Mplus will output an
unstructured correlation matrix

The following R script will read such a matrix and convert it to an R matrix
with lower diagonal entries only:

    cov2mat <- function(file, k) {
      tmp <- scan("file")
      idx <- cumsum(1:k)
      covmat <- matrix(nc=k, nr=k)
      covmat[1,1] <- 1
      for (j in 1:(k-1))
        covmat[j+1,1:(j+1)] <- tmp[(idx[j+1]-j):idx[j+1]]

      return(covmat)
    }

It could be used this way:

    write.table(cov2mat(covmat, 38), file="covmat_diag.dat", na="",
	            row.names=FALSE, col.names=FALSE)

If we need the full matrix (lower and upper-diagonal elements), we can use
the following:

    fill.cor <- function(x, k) {
        upper <- matrix(x, ncol=k, byrow=FALSE)
        diag(upper) <- 0
        lower <- matrix(x, ncol=k, byrow=TRUE)
        out <- lower + upper
        return(out)
    }
    covmat[is.na(covmat)] <- 0
    covmat.full <- fill.cor(as.vector(matrix(t(covmat), nr=1)), 38)


Contrary to other software (R, Stata), computing the polychoric correlation
matrix is quite fast. My own benchmark tend to indicate that Mplus is 200 to
500 times faster than Stata for 'basic' psychometric models (e.g., 2PL or
MIMIC models).

*Confirmatory factor analysis*

To get standardized model fit indices (SRMR), add in the `MODEL` section

    F1@1;
    F2@1;
    F3@1;

Modification indices can be requested by adding

    OUTPUT:
	  modindices(0);

*Bifactor models*
ex. 4.7 p. 58

*References*

Sass, D.A. and Schmitt, T.A. (2010).
[[http://www.statmodel.com/download/Sass%20Schmitt%202010%20MBR.pdf][A Comparative Investigation of Rotation Criteria Within Exploratory Factor Analysis]]. *Multivariate
Behavioral Research*, 45: 1, 73–103.

** [2018-07-19 Jeu] Fizzbuzz in Racket with pattern matching:

#+BEGIN_SRC racket
(define (fizzbuzz? n)
  (match (list (remainder n 3) (remainder n 5))
    [(list 0 0) 'fizzbuzz]
    [(list 0 _) 'fizz]
    [(list _ 0) 'buzz]
    [_          #f]))
#+END_SRC

In Clojure:

#+BEGIN_SRC clojure
(->> [(cycle [:fizz :_ :_])
      (cycle [:buzz :_ :_ :_ :_])]
     (apply map vector)
     (take 25))
#+END_SRC

See Stuart Sierra, https://stuartsierra.com/2018/07/06/threading-with-style
