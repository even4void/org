#+TITLE: Vim 101
#+AUTHOR: chl
#+DATE: August 2020

Former Emacs user here. Trying to uncover the basics of Vim keybindings, especially for selection, movement and action on text objects, when using Doom Emacs (yes, just cheating, I'm still an Emacs guy).

* Overview

Hereafter, I will consider only three kind of operation: motion, transformations and actions. Motion or movement refers to moving around in the buffer. Transformations are applied to text objects, whether it is a single object (e.g., adjacent word or line) or a visual selection. Finally, actions are all other operations that can operate on a per-buffer basis or on the current selection. I'm not interested in keybindings specific of a particular mode (e.g., VCS, Markdown, Org) although I may record some shortcuts specific to =prog-mode=.

I shall put additional references at a later point. \autocite{neil-2018-moder-vim} In the meantime, here's a nice overview of why Vim may be a good companion for programming stuff, written by Steve Losh: [[https://stevelosh.com/blog/2010/09/coming-home-to-vim/][Coming Home to Vim]]. The document [[https://github.com/noctuid/evil-guide][Emacs/Evil for Vim Users]] provides an excellent introduction to the difference between Emacs and Vim terminolgy (e.g., what does 'yanking' means in Emacs or Vim), and how Evil compares to standard Vim.

#+BEGIN_QUOTE
I’ve been able to get by without almost ever using Emacs' default keybindings. The exceptions for me are =C-g= and =C-h=. Even if you don’t plan on learning emacs’ keybindings in full, I recommend learning these when starting out. --- Fox Kiester
#+END_QUOTE

Indeed, the =C-g= shortcut remain important as it allows to break almost everything in Emacs, but the help system is easily accessible using Doom Emacs using the leader key (=SPC=) only. Likewise, =C-c C-c= remains ubiquitous in various modes, both in Doom and vanilla Emacs.

* Basic stuff

** Selection

Let us consider the following example:

#+BEGIN_EXAMPLE
The quick brown fox jumps over the lazy dog.
#+END_EXAMPLE

In normal mode, to select the first word in the above example, =yw= can be used when the cursor is set to the first character. If this is not the case, moving at the beginning of the visual line (=0=) will suffice (see next section). To select the whole line, =yy= (same as =Y=) or =y$= could be used instead. In these two cases, the instruction for yanking, =y=, can be replaced with =d=, to delete, or =c=, to edit in place. On any given character, =r= allow to switch to replace mode and to edit the character under the cursor. Unlike Emacs, the cursor is always positioned on a character, and not in between.

A simple alternative to =yw= is =yiw= (or =yaw=): these commands allow to yank the current word excluding (or including) the surrounding whitespaces. Also, =yf<char>= will yank from the current cursor position up to and including the character =<char>=. See next section about the =f= (or =F=) instruction. Technically, those kind of instructions imply a motion (=y{motion}=), like =iw= (inside word). Unlike =yw=, =yW= will select the whole object, including special character like -, # or ::. In the following Racket snippet, the cursor is on the first letter of the function name, =largest-prime-factor=:

#+BEGIN_EXAMPLE
(require math)

(define (largest-prime-factor x)
        ^
(apply max (map car (factorize x))))
#+END_EXAMPLE

In this case, =yw= will only yank largest while =yW= will yank the full function name. Using motion (see next section), we could also use =y%= to yank the function name and its parameter, that is all text objects occurring between the parenthesis.

Copy, cut and paste do not involve the system clipboard (like =pbcopy= and =pbpaste= on macOS) but Vim default register (=""=). In insert mode, the last object copied can be pasted using =C-r "= (this is the default value). In normal mode, we use =""p=. As a final note, instead of pasting in place (i.e., without moving the cursor afterwards), one may use =gp= (paste after) or =gP= (paste before) to move the cursor after the pasted object.

** Motion

Basically, what I usually want to do is: move at the beginning or end of current (physical) line -- in insert mode I use standard Emacs keybindings =C-a= and =C-e=,[fn::To use standard Emacs movements to jump to the beginning or end of line in insert mode, one can use (in Vim): =inoremap <C-e> <C-o>$= and =inoremap <C-a> <C-o>0=. With Evil, this becomes (see [[https://stackoverflow.com/a/16226006][Evil Mode best practice]] on Stack Overflow): =(define-key evil-normal-state-map "\C-e" 'evil-end-of-line)=, with similar instructions for =evil-motion-state-map= and =evil-visual-state-map=. Note that the =evil-insert-state-map= is not necessary with Doom Emacs.] jump to the previous or next word (but this is generally to yank or delete this word), or to the previous or next blank line (useful in =text-mode= and =prog-mode=). I also like moving between opening and closing brackets or parenthesis. Finally, I find it useful to quickly jump to a specific line number.

So basically, given the following snippet of text, I want to be able to jump quickly to position A, B, C and D, or to select region delimited by either two of these anchors:

#+BEGIN_EXAMPLE
The quick brown fox jumps over the lazy dog.
^   ^                          ^           ^
A   B                          C           D
#+END_EXAMPLE

There are more complex scenarios but I feel like these are the most common jumps: A is the beginning of a sentence (or line), A--B corresponds to moving to the beginning of the next word, A--C is a jump to next word that start with a 't', and D is the end of the sentence (or line), which means that A--D is akin to jumping from the beginning to the end of the sentence. Common keybindings appear in Table [[tab:motion1]]. Note that =[= and =]= are prefix operators, much like =z= or =g,= in Doom Emacs. They are generally used to navigate in the buffer list, or to jump to the next or previous error or Git hunk.

#+NAME:      tab:motion1
#+LABEL:     tab:motion1
#+ATTR_HTML: :border 2 :rules all :frame border :width 100%
#+CAPTION:   Basic shortcuts for motion in visual mode
|---------+------------------------------------------------------------|
|---------+------------------------------------------------------------|
| Keys    | Description                                                |
|---------+------------------------------------------------------------|
| b       | move cursor to previous word                               |
| w       | move cursor to next word                                   |
| 0       | Go to beginning of line                                    |
| $       | Go to end of line                                          |
| gg      | Go to beginning of buffer                                  |
| G       | Go to end of buffer                                        |
| :X      | Go to line number X                                        |
| f<char> | Go to next occurrence of char on line                      |
| F<char> | Go to previous occurrence of char on line                  |
| C-u     | Scroll to previous screen                                  |
| C-d     | Scroll to next screen                                      |
| o       | Toggle between beginning and ending of selection           |
| %       | Toggle between beginning and ending of matching delimiters |
| (       | Jump to beginning of paragraph                             |
| )       | Jump to end of paragraph                                   |
| {       | Jump to next empty line                                    |
| }       | Jump to previous empty line                                |
|---------+------------------------------------------------------------|
|---------+------------------------------------------------------------|

The shortcuts listed in Table [[tab:motion2]] are specific to Doom Emacs and are usually mapped under the =g= or =z= prefix operator. There are also keybindings specific to =prog-mode= like =gd= or =gD=: they are mapped to the corresponding =xref-find-*= functions unless the [[https://emacs-lsp.github.io/lsp-mode/][lsp]] package is installed in which case they are associated to =lsp-find-*= functions. Likewise, =[l= and =]l= in an Org buffer can be used to jump to the previous or next link (in the EWW browser, it is just =<tab>= and =s-<tab>=).


#+NAME:      tab:motion2
#+LABEL:     tab:motion2
#+ATTR_HTML: :border 2 :rules all :frame border :width 100%
#+CAPTION:   Motion shortcuts in visual mode for Doom Emacs
|------+-----------------------------------|
|------+-----------------------------------|
| Keys | Description                       |
|------+-----------------------------------|
| g;   | Goto last change                  |
| g^   | First non blank character         |
| g0   | Jump to beginning of visual line  |
| gm   | Jump to middle of visual line     |
| g$   | Jump to end of visual line        |
| gd   | Go to definition                  |
| gD   | Go to references                  |
| zz   | Scroll line to center (of screen) |
| zb   | Scroll line to bottom             |
| zt   | Scroll line to top                |
|------+-----------------------------------|
|------+-----------------------------------|


#+LATEX: \printbibliography
