

* CS 3110 Fall 2017: Data Structures and Functional Programming

URL: https://www.cs.cornell.edu/courses/cs3110/2017fa/

#+BEGIN_QUOTE
The key linguistic abstraction of functional languages is the /mathematical function/. A function maps an input to an output; for the same input, it always produces the same output. That is, mathematical functions are stateless: they do not maintain any extra information or state that persists between usages of the function. Functions are first-class: you can use them as input to other functions, and produce functions as output. Expressing everything in terms of functions enables a uniform and simple programming model that is easier to reason about than the procedures and methods found in other families of languages.
#+END_QUOTE

OCaml is a statically-typed and type-safe programming language, featuring algebric datatypes, type inference, parametric polymorphism, garbage collection, and modules.

#+BEGIN_QUOTE
Functional languages have a surprising tendency to predict the future of more mainstream languages. Java brought garbage collection into the mainstream in 1995; Lisp had it in 1958. Java didn't have generics until version 5 in 2004; the ML family had it in 1990. First-class functions and type inference have been incorporated into mainstream languages like Java, C#, and C++ over the last 10 years, long after functional languages introduced them.
#+END_QUOTE

#+BEGIN_QUOTE
Aesthetics do matter. Code isn't written just to be executed by machines. It's also written to communicate to humans. Elegant code is easier to read and maintain. It isn't necessarily easier to write.
#+END_QUOTE

*date fun [⋆⋆⋆]* Define a function that takes an integer d and string m as input and returns true just when d and m form a valid date. Here, a valid date has a month that is one of the following abbreviations: Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sept, Oct, Nov, Dec. And the day must be a number that is between 1 and the minimum number of days in that month, inclusive. For example, if the month is Jan, then the day is between 1 and 31, inclusive, whereas if the month is Feb, then the day is between 1 and 28, inclusive.

#+BEGIN_SRC ocaml

#+END_SRC

Five aspects to learning a PL: syntax, *semantics*, *idioms*, libraries, tools.

* Functional Data Structures

URL: https://cs.uwaterloo.ca/~plragde/flaneries/FDS/

* Programming Languages

URL: https://courses.cs.washington.edu/courses/cse341/12au

Racket /versus/ Lisp: not purely functional (why?), lexically scoped.

- atomic data types: numbers, symbols, boolean, strings and characters
- predicates: return =#f= or =#t=; predicates end in =?= while functions with side effects (shudder) end in =!=
- functions: prefix syntax; arguments are passed by value; no lazy evaluation
- everything is a list (and functions are first-class in Racket)! Lists are unbounded, possibly with heterogeneous data types; (x) is not the same as x, and () is the empty list
- Racket expressions (often called S-Expressions, for Symbolic Expressions) are either lists or atoms
- a quoted object evalutes to itself
- local (=let=) and global (=define=) variables, without type declaration; a symbol evaluates to the value of the variable it names;lLexically scoped variables (aka local variables) = =let= and =let*= (can refer to bindings that have been made previously)

Main functions and predicates that operate on lists: =length=, =equal?=, =car=, =cdr= (+ composition of =car= and =cdr=, e.g., =(cadr s)=), =cons=, =list=, =null?=, =pair?=.

Evaluation rules:
1. Numbers, strings, =#f=, and =#t= are literals, that is, they evaluate to themselves.
2. Symbols are treated as variables, and to evaluate them, their bindings are looked up in the current environment.
3. For lists, the first element specifies the function. The remaining elements of the list specify the arguments. Evaluate the first element in the current environment to find the function, and evaluate each of the arguments in the current environment, and call the function on these values. 

Quoted symbols: ='(a b)= ≡ =(quote (a b))=

The =lambda= special form allows to create anonymous functions, where parameters are lexically scoped, while named functions are created using =define=, with formal parameters, which amounts to bind the result of a =lambda= to a variable.

Comments: A frequently used convention is that one semicolon is used for a short comment on a line of code, two semicolons are used for a comment within a function on its own line, and three semicolons are used for an introductory or global comment (outside a function definition).

Equality and Identity: =equal?=, =eqv?=, =eq?=

Racket provides three primitives for equality and identity testing:
1. =eq?= is pointer comparison. It returns =#t= iff its arguments literally refer to the same objects in memory. Symbols are unique. Two symbols that look the same are =eq=. Two variables that refer to the same object are =eq=.
2. =eqv?= is like =eq?= but does the right thing when comparing numbers. =eqv?= returns =#t= iff its arguments are =eq= or if its arguments are numbers that have the same value. =eqv?= does not convert integers to floats when comparing integers and floats though.
3. =equal?= returns true if its arguments have the same structure. Formally, we can define =equal?= recursively. =equal?= returns =#t= if its arguments are =eqv=, or if its arguments are lists whose corresponding elements are =equal=; and otherwise false. (Note the recursion.) Two objects that are =eq= are both =eqv= and =equal=. Two objects that are =eqv= are =equal=, but not necessarily =eq=. Two objects that are =equal= are not necessarily =eqv= or =eq=. =eq= is sometimes called an identity comparison and =equal= is called an equality comparison.

Note: Racket provides === for comparing two numbers, and will coerce one type to another. For example, =(equal? 0 0.0)= returns =#f=, but =( 0 0.0)= returns =#t=.

Logical operators: Operators =and= and =or= are special forms (like =if=) and do not necessarily evaluate all arguments. They just evaluate as many arguments as needed to decide whether to return =#t= or =#f=. 

Note: In R4 of Scheme the empty list is equivalent to =#f=, and everything else is equivalent to =#t=. However, in Scheme R5 and Racket the empty list is also equivalent to =#t=!

Other special form: =cond=. As soon as we find a test that evaluates to true, then we evaluate the corresponding expr and return its value. The remaining tests are not evaluated, and all the other expr's are not evaluated. 

Tail recursion: a function that returns the result of the recursive call back without alteration. It doesn't use stack space for every recursive call; instead Racket compilers handle tail recursion as efficiently as a program that just uses loops instead of recursion.
 It is sometimes possible to use an accumulator -- an additional parameter to a function that accumulates the answer -- to convert a non-tail recursive function into a tail recursive one. E.g.:

#+begin_src scheme
(define (std-factorial n)
  (if (zero? n)
      1
      (* n (std-factorial (- n 1))))) 
#+end_src

vs.

#+begin_src scheme
(define (factorial n)
  (acc-factorial n 1))

(define (acc-factorial n sofar)
  (if (zero? n)
      sofar
      (acc-factorial (- n 1) (* sofar n))))
#+end_src


* Survey of Programming Languages

URL: https://home.adelphi.edu/~siegfried/cs270/notes.html

* Misc

** Haskell

*Tutorials:*

- [ ] [[https://wiki.haskell.org/H-99:_Ninety-Nine_Haskell_Problems][H-99: Ninety-Nine Haskell Problems]]
- [ ] [[https://en.wikibooks.org/wiki/Haskell][Haskell wikibook]]
- [ ] Dr. Erik Meijer, [[https://channel9.msdn.com/Series/C9-Lectures-Erik-Meijer-Functional-Programming-Fundamentals][Functional Programming Fundamentals]]
- [ ] [[https://wiki.haskell.org/Haskell_Tutorial_for_C_Programmers][Haskell Tutorial for C Programmers]]
- [ ] [[https://crypto.stanford.edu/~blynn/haskell/][Haskell Fan Site]]
- [ ] [[http://www.cse.chalmers.se/~rjmh/tutorials.html][Tutorial Papers in Functional Programming]]
- [ ] [[https://wiki.haskell.org/Why_Haskell_matters][Why Haskell matters]]
- [ ] [[https://wiki.haskell.org/Hitchhikers_guide_to_Haskell][Hitchhikers guide to Haskell]]

** Common Lisp

- =consp= is not a convenient function to use to check whether something "is a list"; better to use =listp=, which combines =consp= and =null= (Source: https://eli.thegreenplace.net/2016/common-lisps-consp-and-listp-in-clojure/).
