#+TITLE:        Premiers pas avec Git
#+LANGUAGE: fr
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="worg.css" />
#+OPTIONS: H:3 num:nil toc:t \n:nil ':t @:t ::t |:t ^:nil -:t f:t *:t TeX:t skip:nil d:nil html-style:nil html-postamble:nil tags:not-in-toc

* Présentation de Git

** Les systèmes de contôle de révision

À quoi servent donc les sytèmes de révision ou de version ?

Dans un projet de développement informatique ou même lors de la rédaction d'un document (rapport scientifique, documentation technique, etc.), il est assez fréquent de procéder par étapes. L'édition est généralement incrémentale et on ajoute des éléments au fur et à mesure, avec de temps en temps des retours en arrière : on supprime des éléments que l'on venait d'ajouter récemment et on recommence à partir d'un état antérieur. Parfois, on souhaite même annuler un ensemble de modifications et repartir d'une version précédente du document ou du fichier de code. C'est un des premiers aspects des sytèmes de révision : pouvoir consigner l'historique des modifications apportées à un ou plusieurs fichiers et avoir la possibilité de revenir à des étapes précédentes à l'aide de cet historique. Si un simple fichier texte d'historique, comme par exemple un fichier =Changelog=, permet de consigner les différentes modifications apportées à un document, cela ne permet pas de revenir à un état antérieur du document à moins de refaire toutes les étapes en sens inverse, une par une.

Un autre cas de figure consiste à travailler à plusieurs sur un même ensemble de fichiers.

D'où l'idée de recourir à un système de contrôle de révision. Les systèmes [[https://subversion.apache.org][Subversion]], [[https://git-scm.com][Git]] ou [[https://www.mercurial-scm.org][Mercurial]] permettent à la fois le suivi des modifications d'un ensemble de fichier et le travail collaboratif.



** Interface graphique et ligne de commande


* Travail solo

Même si Git est avant tout pensé pour un travail collaboratif, il est tout à fait possible d'utilsier Git localement pour gérer un projet en solo. Il peut s'agir de suivre les modifications apportées à un ou plusieurs documents texte ou à du code source. Les avantages de Git sont ceux que procurent tout système de suivi de révision : il est possible d'archiver et d'annoter chaque avancée du projet (/commit/), d'isoler des portions spécifiques des documents ou du code (/branch/), voire d'assigner des étiquettes (/tag/) à certaines étapes.

L'initialisation d'un dépôt Git est assez simple. En ligne de commande, il suffit de naviguer dans le répertoire du projet et d'initialiser le suivi Git dans ce répertoire. La commande =git init= se charge de créer un répertoire masqué, =.git=, dans lequel seront consignés l'historique de révision et des images intermédiaires des différents objets (documents texte, images, code, etc.) soumis au suivi.

#+BEGIN_SRC bash
cd project
git init .
#+END_SRC


[https://chris.beams.io/posts/git-commit/][How to Write a Git Commit Message]


https://stackoverflow.com/questions/1057564/pretty-git-branch-graphs
http://bsara.github.io/git-grapher/


* Fork-and-Branch

https://www.atlassian.com/git/tutorials/comparing-workflows
https://blog.scottlowe.org/2015/01/27/using-fork-branch-git-workflow/
https://sandofsky.com/blog/git-workflow.html
